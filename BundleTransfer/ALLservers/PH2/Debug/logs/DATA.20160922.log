[2016/09/22 14:51:48.479][3] ***** ***** ***** [2016/09/22 11:42:04.363] ***** ***** *****
[2016/09/22 14:51:48.542][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

USE master
if db_id('Trade_To_Pms') is not null
BEGIN
    ALTER DATABASE Trade_To_Pms SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    execute sp_detach_db 'Trade_To_Pms' ;  -- 卸載SQL實體檔案
END

exec sp_attach_db N'Trade_To_Pms', N'E:\SQL_DB\Trade_To_Pms\Trade_To_Pms.mdf'

System.Data.SqlClient.SqlException (0x80131904): Unable to open the physical file "E:\SQL_DB\Trade_To_Pms_PH\Trade_To_Pms_PH_log.ldf". Operating system error 32: "32(The process cannot access the file because it is being used by another process.)".
Changed database context to 'master'.
File activation failure. The physical file name "E:\SQL_DB\Trade_To_Pms_PH\Trade_To_Pms_PH_log.ldf" may be incorrect.
New log file 'E:\SQL_DB\Trade_To_Pms\Trade_To_Pms_log.ldf' was created.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:0b1c0231-e2fa-493a-be9f-adcba647272f
[2016/09/22 14:51:55.033][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteSPByConn  執行資料庫預存程序時發生錯誤。
imp_Airpp
System.Data.SqlClient.SqlException (0x80131904): String or binary data would be truncated.
The statement has been terminated.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteSPByConn(SqlConnection conn, String spname, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 847
ClientConnectionId:4c2c5f6d-1736-4c8c-9e6f-b8e77043b565
[2016/09/22 14:52:11.208][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteSPByConn  執行資料庫預存程序時發生錯誤。
imp_export
System.Data.SqlClient.SqlException (0x80131904): The MERGE statement attempted to UPDATE or DELETE the same row more than once. This happens when a target row matches more than one source row. A MERGE statement cannot UPDATE/DELETE the same row of the target table multiple times. Refine the ON clause to ensure a target row matches at most one source row, or use the GROUP BY clause to group the source rows.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteSPByConn(SqlConnection conn, String spname, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 847
ClientConnectionId:4c2c5f6d-1736-4c8c-9e6f-b8e77043b565
[2016/09/22 16:30:41.478][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteSPByConn  執行資料庫預存程序時發生錯誤。
imp_Ietms
System.Data.SqlClient.SqlException (0x80131904): 在目前的命令上發生嚴重錯誤。如果有任何結果，都必須捨棄。
在目前的命令上發生嚴重錯誤。如果有任何結果，都必須捨棄。
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteSPByConn(SqlConnection conn, String spname, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 847
ClientConnectionId:4c2c5f6d-1736-4c8c-9e6f-b8e77043b565
[2016/09/22 16:30:41.484][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

If Object_Id ( 'dbo.imp_Inv') Is Not Null
    Drop Procedure dbo.imp_Inv;

System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.493][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

-- =============================================
-- Author:		LEO
-- Create date: 20160903
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE imp_Inv
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   -- INVENTORY
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.Ukey	       =b.Ukey
      ,a.POID	      =b.POID
      ,a.Seq1	      =b.Seq1
      ,a.Seq2	      =b.Seq2
      ,a.ProjectID	      =b.ProjectID
      ,a.FactoryID	      =b.FactoryID
      ,a.UnitID	      =b.UnitID
      ,a.InventoryRefnoId	      =b.InventoryRefnoId
      ,a.Refno	      =b.Refno
      ,a.BrandGroup	      =b.BrandGroup
      ,a.BrandID	      =b.BrandID
      ,a.LimitHandle	      =b.LimitHandle
      ,a.LimitSmr	      =b.LimitSmr
      ,a.AuthMr	      =b.AuthMr
      ,a.Payable	      =b.Payable
      ,a.Qty	      =b.Qty
      ,a.InputQty	      =b.InputQty
      ,a.OutputQty	      =b.OutputQty
      ,a.Deadline	      =b.Deadline
      ,a.PoFactory	      =b.PoFactory
      ,a.OrderHandle	      =b.OrderHandle
      ,a.OrderSmr	      =b.OrderSmr
      ,a.PoHandle	      =b.PoHandle
      ,a.PoSmr	      =b.PoSmr
      ,a.StyleID	      =b.StyleID
      ,a.SeasonID	      =b.SeasonID
      ,a.FabricType	      =b.FabricType
      ,a.MtlTypeID	      =b.MtlTypeID
      ,a.ReasonID	      =b.ReasonID
      ,a.Remark	      =b.Remark
      ,a.IcrNo	      =b.IcrNo
      ,a.DebitID	      =b.DebitID
      ,a.Lock	      =b.Lock
      ,a.AddName	      =b.AddName
      ,a.AddDate	      =b.AddDate
      ,a.EditName	      =b.EditName
      ,a.EditDate	      =b.EditDate
      ,a.ETA	      =b.ETA
from Production.dbo.Inventory as a 
inner join Trade_To_Pms.dbo.Inventory as b ON a.POID=b.POID and a.Seq1=b.Seq1 and a.Seq2=b.Seq2 and a.FactoryID=b.FactoryID and a.UnitID=b.UnitID and a.ProjectID=b.ProjectID and a.InventoryRefnoId=b.InventoryRefnoId
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Inventory(
       Ukey
      ,POID
      ,Seq1
      ,Seq2
      ,ProjectID
      ,FactoryID
      ,UnitID
      ,InventoryRefnoId
      ,Refno
      ,BrandGroup
      ,BrandID
      ,LimitHandle
      ,LimitSmr
      ,AuthMr
      ,Payable
      ,Qty
      ,InputQty
      ,OutputQty
      ,Deadline
      ,PoFactory
      ,OrderHandle
      ,OrderSmr
      ,PoHandle
      ,PoSmr
      ,StyleID
      ,SeasonID
      ,FabricType
      ,MtlTypeID
      ,ReasonID
      ,Remark
      ,IcrNo
      ,DebitID
      ,Lock
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
      ,ETA
)
select 
       Ukey
      ,POID
      ,Seq1
      ,Seq2
      ,ProjectID
      ,FactoryID
      ,UnitID
      ,InventoryRefnoId
      ,Refno
      ,BrandGroup
      ,BrandID
      ,LimitHandle
      ,LimitSmr
      ,AuthMr
      ,Payable
      ,Qty
      ,InputQty
      ,OutputQty
      ,Deadline
      ,PoFactory
      ,OrderHandle
      ,OrderSmr
      ,PoHandle
      ,PoSmr
      ,StyleID
      ,SeasonID
      ,FabricType
      ,MtlTypeID
      ,ReasonID
      ,Remark
      ,IcrNo
      ,DebitID
      ,Lock
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
      ,ETA
from Trade_To_Pms.dbo.Inventory as b
where not exists(select POID from Production.dbo.Inventory as a where a.POID=b.POID and a.Seq1=b.Seq1 and a.Seq2=b.Seq2 and a.FactoryID=b.FactoryID and a.UnitID=b.UnitID and a.ProjectID=b.ProjectID and a.InventoryRefnoId=b.InventoryRefnoId)



--invref
--InventoryRefno
--      ,[BomArticle]
--      ,[BomBuymonth]
--      ,[BomCountry]
--      ,[BomCustCD]
--,[BomFactory]
--      ,[BomStyle]
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.ID	       =b.ID
      ,a.Refno	      =b.Refno
      ,a.Width	      =b.Width
      ,a.ColorID	      =b.ColorID
      ,a.SizeSpec	      =b.SizeSpec
      ,a.SizeUnit	      =b.SizeUnit
      ,a.BomCustPONo	      =b.BomCustPONo
      ,a.BomZipperInsert	      =b.BomZipperInsert
      ,a.Special_Old	      =b.Special_Old
      ,a.Spec_Old	      =b.Spec_Old
      ,a.ProdID_Old	      =b.ProdID_Old
      ,a.AddName	      =b.AddName
      ,a.AddDate	      =b.AddDate
from Production.dbo.InventoryRefno as a 
inner join Trade_To_Pms.dbo.InventoryRefno as b ON a.id=b.id
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.InventoryRefno(
       ID
      ,Refno
      ,Width
      ,ColorID
      ,SizeSpec
      ,SizeUnit
      ,BomCustPONo
      ,BomZipperInsert
      ,Special_Old
      ,Spec_Old
      ,ProdID_Old
      ,AddName
      ,AddDate
)
select 
       ID
      ,Refno
      ,Width
      ,ColorID
      ,SizeSpec
      ,SizeUnit
      ,BomCustPONo
      ,BomZipperInsert
      ,Special_Old
      ,Spec_Old
      ,ProdID_Old
      ,AddName
      ,AddDate
from Trade_To_Pms.dbo.InventoryRefno as b
where not exists(select id from Production.dbo.InventoryRefno as a where a.id = b.id)

--Invtrans
----------------------�R���DTABLE�h�����
Delete Production.dbo.Invtrans 
from Production.dbo.Invtrans  as a
left join Trade_To_Pms.dbo.Invtrans  as b on a.id = b.id and a.Ukey = b.Ukey
where b.id is null
AND a.ID > (select top 1 id from  Trade_To_Pms.dbo.Invtrans order by id)
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.ID	 =b.ID
      ,a.Ukey	  =b.Ukey
      ,a.ConfirmDate	      =b.ConfirmDate
      ,a.ConfirmHandle	      =b.ConfirmHandle
      ,a.Confirmed	      =b.Confirmed
      ,a.Qty	      =b.Qty
      ,a.Type	      =b.Type
      ,a.TransferFactory	      =b.TransferFactory
      ,a.InventoryUkey	      =b.InventoryUkey
      ,a.InventoryRefnoId	      =b.InventoryRefnoId
      ,a.PoID	      =b.PoID
      ,a.Seq1	      =b.Seq1
      ,a.Seq2	      =b.Seq2
      ,a.InventoryPOID	      =b.InventoryPOID
      ,a.InventorySeq1	      =b.InventorySeq1
      ,a.InventorySeq2	      =b.InventorySeq2
      ,a.Remark	      =b.Remark
      ,a.JunkPo3	      =b.JunkPo3
      ,a.Deadline	      =b.Deadline
      ,a.ReasonID	      =b.ReasonID
      ,a.Payable	      =b.Payable
      ,a.PoHandle	      =b.PoHandle
      ,a.PoSmr	      =b.PoSmr
      ,a.OrderHandle	      =b.OrderHandle
      ,a.OrderSmr	      =b.OrderSmr
      ,a.PoFactory	      =b.PoFactory
      ,a.LimitHandle	      =b.LimitHandle
      ,a.LimitSmr	      =b.LimitSmr
      ,a.AuthMr	      =b.AuthMr
      ,a.TransId	      =b.TransId
      ,a.TransferUkey	      =b.TransferUkey
      ,a.Po3QtyOld	      =b.Po3QtyOld
      ,a.InventoryQtyOld	      =b.InventoryQtyOld
      ,a.ProjectOld	      =b.ProjectOld
      ,a.BrandID	      =b.BrandID
      ,a.BrandGroup	      =b.BrandGroup
      ,a.Refno	      =b.Refno
      ,a.FabricType	      =b.FabricType
      ,a.FactoryID	      =b.FactoryID
      ,a.MtlTypeID	      =b.MtlTypeID
      ,a.ProjectID	      =b.ProjectID
      ,a.SeasonID	      =b.SeasonID
      ,a.StyleID	      =b.StyleID
      ,a.UnitID	      =b.UnitID
      ,a.BomCustPONo	      =b.BomCustPONo
      ,a.BomZipperInsert	      =b.BomZipperInsert
      ,a.AddName	      =b.AddName
      ,a.AddDate	      =b.AddDate
      ,a.EditDate	      =b.EditDate
      ,a.EditName	      =b.EditName
      ,a.Seq70PoID	      =b.Seq70PoID
      ,a.Seq70Seq1	      =b.Seq70Seq1
      ,a.Seq70Seq2	      =b.Seq70Seq2
from Production.dbo.Invtrans  as a 
inner join Trade_To_Pms.dbo.Invtrans  as b ON a.id=b.id   and a.Ukey = b.Ukey
where b.Confirmed=1
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Invtrans (
       ID
	  ,Ukey
      ,ConfirmDate
      ,ConfirmHandle
      ,Confirmed
      ,Qty
      ,Type
      ,TransferFactory
      ,InventoryUkey
      ,InventoryRefnoId
      ,PoID
      ,Seq1
      ,Seq2
      ,InventoryPOID
      ,InventorySeq1
      ,InventorySeq2
      ,Remark
      ,JunkPo3
      ,Deadline
      ,ReasonID
      ,Payable
      ,PoHandle
      ,PoSmr
      ,OrderHandle
      ,OrderSmr
      ,PoFactory
      ,LimitHandle
      ,LimitSmr
      ,AuthMr
      ,TransId
      ,TransferUkey
      ,Po3QtyOld
      ,InventoryQtyOld
      ,ProjectOld
      ,BrandID
      ,BrandGroup
      ,Refno
      ,FabricType
      ,FactoryID
      ,MtlTypeID
      ,ProjectID
      ,SeasonID
      ,StyleID
      ,UnitID
      ,BomCustPONo
      ,BomZipperInsert
      ,AddName
      ,AddDate
      ,EditDate
      ,EditName
      ,Seq70PoID
      ,Seq70Seq1
      ,Seq70Seq2
)
select 
 ID
	  ,Ukey
      ,ConfirmDate
      ,ConfirmHandle
      ,Confirmed
      ,Qty
      ,Type
      ,TransferFactory
      ,InventoryUkey
      ,InventoryRefnoId
      ,PoID
      ,Seq1
      ,Seq2
      ,InventoryPOID
      ,InventorySeq1
      ,InventorySeq2
      ,Remark
      ,JunkPo3
      ,Deadline
      ,ReasonID
      ,Payable
      ,PoHandle
      ,PoSmr
      ,OrderHandle
      ,OrderSmr
      ,PoFactory
      ,LimitHandle
      ,LimitSmr
      ,AuthMr
      ,TransId
      ,TransferUkey
      ,Po3QtyOld
      ,InventoryQtyOld
      ,ProjectOld
      ,BrandID
      ,BrandGroup
      ,Refno
      ,FabricType
      ,FactoryID
      ,MtlTypeID
      ,ProjectID
      ,SeasonID
      ,StyleID
      ,UnitID
      ,BomCustPONo
      ,BomZipperInsert
      ,AddName
      ,AddDate
      ,EditDate
      ,EditName
      ,Seq70PoID
      ,Seq70Seq1
      ,Seq70Seq2
from Trade_To_Pms.dbo.Invtrans  as b
where not exists(select id from Production.dbo.Invtrans  as a where a.id = b.id  and a.Ukey = b.Ukey)
AND b.Confirmed=1
--InReason  InvtransReason
----------------------�R���DTABLE�h�����
Delete Production.dbo.InvtransReason
from Production.dbo.InvtransReason as a left join Trade_To_Pms.dbo.InvtransReason as b
on a.id = b.id
where b.id is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.ID	       =b.ID
      ,a.ReasonEN	      =b.ReasonEN
      ,a.ReasonCH	      =b.ReasonCH
      ,a.IsDefault	      =b.IsDefault
      ,a.Junk	      =b.Junk
      ,a.AdjustFields	      =b.AdjustFields
      ,a.AdjustDesc	      =b.AdjustDesc
      ,a.AddName	      =b.AddName
      ,a.AddDate	      =b.AddDate
      ,a.EditName	      =b.EditName
      ,a.EditDate	      =b.EditDate

from Production.dbo.InvtransReason as a inner join Trade_To_Pms.dbo.InvtransReason as b ON a.id=b.id
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.InvtransReason(
       ID
      ,ReasonEN
      ,ReasonCH
      ,IsDefault
      ,Junk
      ,AdjustFields
      ,AdjustDesc
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
)
select 
       ID
      ,ReasonEN
      ,ReasonCH
      ,IsDefault
      ,Junk
      ,AdjustFields
      ,AdjustDesc
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
from Trade_To_Pms.dbo.InvtransReason as b
where not exists(select id from Production.dbo.InvtransReason as a where a.id = b.id)



END


System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.499][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

If Object_Id ( 'dbo.imp_Invadj') Is Not Null
    Drop Procedure dbo.imp_Invadj;

System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.507][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

-- =============================================
-- Author:		LEO
-- Create date: 20160903
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[imp_Invadj]
	-- Add the parameters for the stored procedure here

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--  Invadj1    invadjust
--PMS�h,[OrderShipmodeSeq]
--      ,[MDivisionID]

-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.InvAdjust(
        ID
      ,IssueDate
      ,REASON
      ,GarmentInvoiceID
      ,OrderID
      ,PullDate
      ,Ukey_Pullout
      ,BrandID
      ,FactoryID
      ,ARVoucherID
      ,VoucherID
      ,Status
      ,OrigPulloutQty
      ,OrigPrice
      ,OrigPulloutAmt
      ,OrigSurcharge
      ,OrigAddCharge
      ,OrigCommission
      ,OrigDocFee
      ,AdjustPulloutQty
      ,AdjustPulloutAmt
      ,AdjustSurcharge
      ,AdjustAddCharge
      ,AdjustCommission
      ,AdjustDocFee
      ,AddName
      ,AddDate
      ,Eeit_Name
      ,EditDate
      ,PriceCheckID

)
select 
        ID
      ,IssueDate
      ,REASON
      ,GarmentInvoiceID
      ,OrderID
      ,PullDate
      ,PulloutUkey
      ,BrandID
      ,FactoryID
      ,ARVoucherID
      ,VoucherID
      ,Status
      ,OrigPulloutQty
      ,OrigPrice
      ,OrigPulloutAmt
      ,OrigSurcharge
      ,OrigAddCharge
      ,OrigCommission
      ,OrigDocFee
      ,AdjustPulloutQty
      ,AdjustPulloutAmt
      ,AdjustSurcharge
      ,AdjustAddCharge
      ,AdjustCommission
      ,AdjustDocFee
      ,AddName
      ,AddDate
      ,Eeit_Name
      ,EditDate
      ,PriceCheckID

from Trade_To_Pms.dbo.InvAdjust as b
where not exists(select id from Production.dbo.InvAdjust as a where a.id = b.id)

--InvAdjust_Qty
--PMS�h
--,[Pullout3Qty]
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.InvAdjust_Qty(
      ID
      ,Article
      ,SizeCode
      ,OrderQty
      ,OrigQty
      ,AdjustQty
      ,Price
      ,NewItem
      ,DiffQty
)
select 
     b.ID
      ,b.Article
      ,b.SizeCode
      ,b.OrderQty
      ,b.OrigQty
      ,b.AdjustQty
      ,b.Price
      ,b.NewItem
      ,b.DiffQty
from Trade_To_Pms.dbo.InvAdjust_Qty as b inner join Trade_To_Pms.dbo.InvAdjust as c on b.ID=c.ID 
where not exists(select id from Production.dbo.InvAdjust_Qty as a where a.id = b.id and a.Article=b.Article and a.SizeCode = b.SizeCode)

--pullout2
--select SUM(ShipQty) from Production.dbo.Pullout_Detail A inner join Trade_To_Pms.dbo.InvAdjust B ON A.OrderID=B.OrderID


--SELECT sum(DiffQty) FROM  Production.dbo.InvAdjust_Qty A inner join Production.dbo.InvAdjust B ON  A.ID = B.ID

SELECT MAX(PulloutDate) as PulloutDate --,a.ID
INTO #TMPPullout2Cdate
FROM  Production.dbo.Pullout_Detail A
inner join Trade_To_Pms.dbo.InvAdjust B ON A.OrderID=B.OrderID AND ShipQty <> 0


UPDATE a
SET  
Status = 'C'
from  Production.dbo.Pullout_Detail as a 
inner join #TMPPullout2Cdate as b ON a.PulloutDate=b.PulloutDate
inner join Trade_To_Pms.dbo.InvAdjust c ON  A.OrderID = c.OrderID
where b.PulloutDate is not null


UPDATE a

SET  
 a.ActPulloutDate = (select IIF(PulloutDate is null,(select PullDate from Trade_To_Pms.dbo.InvAdjust b where a.ID=b.ID),PulloutDate) from #TMPPullout2Cdate)
,a.PulloutComplete = 1
,a.MDClose = getdate()

from Production.dbo.Orders as a 
--inner join Trade_To_Pms.dbo.TTTTTTTTTTTTTTTTTTTTT as b ON a.id=b.id
where a.Qty = (select SUM(ShipQty) from Production.dbo.Pullout_Detail A inner join Trade_To_Pms.dbo.InvAdjust B ON A.OrderID=B.OrderID)
+(SELECT sum(DiffQty) FROM  Production.dbo.InvAdjust_Qty A inner join Production.dbo.InvAdjust B ON  A.ID = B.ID)
and a.PulloutComplete = 0



drop table #TMPPullout2Cdate








END





System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.513][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

If Object_Id ( 'dbo.imp_mockuporder') Is Not Null
    Drop Procedure dbo.imp_mockuporder;

System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.520][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
-- =============================================
-- Author:		<Willy S01910>
-- Create date: <2016/08/24>
-- Description:	<import MockupOrder>
-- =============================================
CREATE PROCEDURE [dbo].[imp_MockupOrder]
AS
BEGIN
	SET NOCOUNT ON;

	declare @oldDate date = (select max(UpdateDate) from Production.dbo.OrderComparisonList) --�W���פJ���̫���

	declare @Sayfty table(id varchar(10)) --�u�t�N�X
	insert @Sayfty select id from Production.dbo.Factory

	declare @dToDay date = CONVERT(date, GETDATE()) --���Ѥ��
	declare @Odate_s date  = (select DateStart from Trade_To_Pms.dbo.DateInfo where name='MockupOrder')
			

		---------------�s�W Temp MockupOrder ----------------------------
		select * into #tempMO from Trade_To_Pms.dbo.MockupOrder a
		where a.FactoryID in (select id from @Sayfty)
		--�s�W���FTY_Group
		ALTER TABLE  #tempMO ADD FTY_Group varchar(8)

		
		update #tempMO
		set FTY_Group =IIF(b.FTYGroup is null,a.FactoryID,b.FTYGroup)
		from #tempMO a 
		inner join Production.dbo.Factory b on a.FactoryID=b.id


	------------------MockupOrder--------------------------------------------------------------

		declare @mockT table (ID varchar(13),isInsert bit)

		Merge Production.dbo.MockupOrder as t
		Using #tempMO as s
		on t.id=s.id
		when matched and s.qty = t.qty or s.styleid = t.styleid or s.SCIDelivery = t.SCIDelivery then
			update set 
			t.MockupID = s.MockupID ,
			t.Description = s.Description ,
			t.Cpu = s.Cpu ,
			t.BrandID = s.BrandID ,
			t.StyleID = s.StyleID ,
			t.SeasonID = s.SeasonID ,
			t.ProgramID = s.ProgramID ,
			t.FactoryID = s.FactoryID ,
			t.Qty = s.Qty ,
			t.CfmDate = s.CfmDate ,
			t.SCIDelivery = s.SCIDelivery ,
			t.MRHandle = s.MRHandle ,
			t.SMR = s.SMR ,
			t.Junk = s.Junk ,
			t.Remark = s.Remark ,
			t.CMPUnit = s.CMPUnit ,
			t.CMPPrice = s.CMPPrice ,
			t.FTYGroup = s.FTy_Group ,
			t.CPUFactor =0 ,
			t.MDivisionID = '' ,
			t.AddName = s.AddName ,
			t.AddDate = s.AddDate ,
			t.EditName = iif(s.EditDate<=t.EditDate,'',s.EditName) ,
			t.EditDate = iif(s.EditDate<=t.EditDate,'',s.EditDate) 
		when not matched by target then  -------go to Merge2
			insert (ID ,MockupID ,Description ,Cpu ,BrandID ,StyleID ,SeasonID ,ProgramID ,FactoryID ,Qty ,CfmDate ,SCIDelivery ,MRHandle ,SMR ,Junk ,Remark ,CMPUnit ,CMPPrice ,FTYGroup ,CPUFactor ,MDivisionID ,AddName ,AddDate ,EditName ,EditDate )
			values(s.ID ,s.MockupID ,s.Description ,s.Cpu ,s.BrandID ,s.StyleID ,s.SeasonID ,s.ProgramID ,s.FactoryID ,s.Qty ,s.CfmDate ,s.SCIDelivery ,s.MRHandle ,s.SMR ,s.Junk ,s.Remark ,s.CMPUnit ,s.CMPPrice ,s.FTy_Group ,0,'',s.AddName ,s.AddDate ,s.EditName ,s.EditDate )
		output inserted.id, iif(deleted.id='',1,0) into @mockT; --�Ninsert =1 , update =0 ����ܹL��id output
		
		---------Merge2
		Merge Production.dbo.OrderComparisonList as t
		Using (select * from  #tempMO where id in(select id from @mockT where isInsert=1)) as s
		on t.orderid=s.id and t.factoryid=s.factoryid and t.updateDate = @dToDay
			when matched then
			update set
				t.NewQty = s.Qty,
				t.NewSCIDelivery=s.SCIDelivery,
				t.NewStyleID=s.StyleID,
				t.TransferDate=@oldDate,
				t.NewOrder='1'
				
			when not matched by target then
				insert(OrderId,UpdateDate,FactoryID,NewQty,NewSCIDelivery,NewStyleID,TransferDate,NewOrder)
				values(s.id,@dToDay,s.FactoryID, s.Qty,s.SCIDelivery,s.StyleID,@oldDate,'1');

		------Merge3
		Merge Production.dbo.OrderComparisonList as t
		Using (select a.*,iif(a.qty <> b.qty,1,0) as diffQty,iif(a.styleid <> b.styleid,1,0) as diffStyle, iif(a.SCIDelivery <> b.SCIDelivery,1,0) as diffScid,
			b.Qty as Pqty, b.SCIDelivery as Pscidlv, b.styleid as Pstyle
			from  #tempMO  a
			inner join Production.dbo.MockupOrder b on a.id=b.id		
			where (a.qty <> b.qty or a.styleid <> b.styleid or a.SCIDelivery <> b.SCIDelivery)
			and a.id not in (select id from @mockT where isInsert=1)
			) as s
		on orderid=s.id and t.factoryid=s.factoryid and t.updateDate = @dToDay
			when matched then
				update set
				--		Qty ���ۦP
				t.OriginalQty=IIF( s.diffQty=1,s.Pqty,t.OriginalQty),
				t.NewQty =iif(s.diffQty=1, s.qty,t.NewQty),
				--		SCIDelivery ���P
				t.OriginalSCIDelivery =iif(s.diffScid=1, s.Pscidlv,t.OriginalSCIDelivery),
				t.NewSCIDelivery =iif(s.diffScid=1, s.SCIDelivery,t.NewSCIDelivery),
				--		StyleID ���P
				t.OriginalStyleID =iif(s.diffStyle=1, s.Pstyle,t.OriginalStyleID),				
				t.NewStyleID =iif(s.diffStyle=1, s.StyleID,t.NewStyleID)			
			when not matched by Target then
				insert(orderid,UpdateDate,TransferDate,FactoryID,OriginalQty,NewQty,OriginalSCIDelivery,NewSCIDelivery,OriginalStyleID,NewStyleID)
				values(s.id,@dToDay,@oldDate,FactoryID,s.Pqty,s.qty,s.Pscidlv,s.SCIDelivery,s.Pstyle,s.StyleID);

	-----------------MockupOrder again------------------------
	
	Merge Production.dbo.OrderComparisonList as t
	Using (select a.*,b.factoryid as Tfactoryid from Production.dbo.MockupOrder a 
		inner join Trade_To_Pms.dbo.MockupOrder b on a.id=b.id
		where a.SCIDelivery >=@Odate_s
		and b.factoryID in (select id from @Sayfty)) as s
	on t.orderid=s.id and t.factoryid=s.factoryid and t.updateDate = @dToDay
		when matched then
			update set
			t.TransferDate=@oldDate,
			t.OriginalQty =s.qty,
			t.OriginalStyleID=s.styleID,
			t.DeleteOrder=1,
			t.NewStyleID=iif(s.factoryid is not null,s.Tfactoryid,t.NewStyleID)

		when not matched by target then
			insert(orderid,UpdateDate,FactoryID,TransferDate,OriginalQty,OriginalStyleID,DeleteOrder,NewStyleID)
			values(s.id,@dToDay,s.FactoryID,@oldDate,s.qty,s.styleID,1,iif(s.factoryid is not null,s.Tfactoryid,''));

	----------------Delete MockOrder ---------------------------------------------------
		
		delete a 
		from Production.dbo.MockupOrder a
		inner join Trade_To_Pms.dbo.MockupOrder b on a.id=b.id and a.FactoryID in (select id from @Sayfty)
		where a.SCIDelivery >=@Odate_s
	
	drop table #tempMO
END







System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.526][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

If Object_Id ( 'dbo.imp_order') Is Not Null
    Drop Procedure dbo.imp_order;

System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.536][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
-- =============================================
-- Author:		<Willy S01910>
-- Create date: <2016/08/25>
-- Description:	<import order>
-- =============================================
CREATE PROCEDURE [dbo].[imp_Order]
AS
BEGIN

	SET NOCOUNT ON;
		
	declare @Sayfty table(id varchar(10)) --工廠代碼
	insert @Sayfty select id from Production.dbo.Factory

	declare @OldDate date = (select max(UpdateDate) from Production.dbo.OrderComparisonList) --最後匯入資料日期
	declare @dToDay date = CONVERT(date, GETDATE()) --今天日期
-----------------匯入訂單檢核表------------------------
	delete from Production.dbo.OrderComparisonList
	where ISNULL(UpdateDate,'')='' and OrderId is null and FactoryID is null

------------------TempTable -------------
	--TempOrder
	select a.* into #TOrder from Trade_To_Pms.dbo.Orders a
	inner join Production.dbo.Factory b on a.FactoryID=b.ID
	--新增欄位FTY_Group
	ALTER TABLE  #TOrder ADD FTY_Group varchar(8)
	Alter table #TOrder add SDPDate date
	

	update #TOrder
	set FTY_Group =IIF(b.FTYGroup is null,a.FactoryID,b.FTYGroup)
	from #TOrder a
	inner join Production.dbo.Factory b on a.FactoryID=b.id

-------------------------------------------------------------------------Order
	Merge Production.dbo.OrderComparisonList as t
	Using (select c.*, a.StyleID as AStyleID,a.FactoryID as AFactory 
		from #TOrder a
		inner join Production.dbo.Orders c on a.id=c.id
		where a.qty > 0 and a.IsForecast = '0'
	) as s
	on t.orderid=s.id and t.factoryid=s.factoryid and t.updateDate = @dToDay
	when matched then
		update set
		t.TransferDate = @OldDate,
		t.OriginalQty=s.qty,
		t.OriginalBuyerDelivery=s.BuyerDelivery,
		t.DeleteOrder=1,
		t.OriginalStyleID=s.AStyleID,
		t.TransferToFactory =iif(s.AFactory is not null and s.AFactory in (select id from @Sayfty),s.AFactory,t.TransferToFactory)
		
	when not matched by target then
		insert(OrderId,UpdateDate,FactoryID,TransferDate,OriginalQty,OriginalBuyerDelivery,DeleteOrder,OriginalStyleID,TransferToFactory)
		values(s.id,@dToDay,s.FactoryID,@OldDate,s.qty,s.BuyerDelivery,1,s.AStyleID,
		iif(s.AFactory is not null and s.AFactory in (select id from @Sayfty),s.AFactory,'') );
	


		--轉單為Cutting母單時,覆寫CutPlan母子單的工廠欄位
		Update a
		set a.MDivisionid = b.FTY_Group
		from Production.dbo.Cutplan a
		inner join #TOrder b on a.ID=b.ID
		inner join Production.dbo.Orders c on b.ID=c.ID
		where b.qty > 0 and b.IsForecast = '0'


		----delete  SewingSchedule_Detail
		delete c
		from #TOrder a 
		inner join Production.dbo.SewingSchedule b on a.id=b.ID and b.FactoryID<>a.FTY_Group
		inner join Production.dbo.SewingSchedule_Detail c on c.ID=b.ID
		where a.qty > 0 and a.IsForecast = '0'
		
		--delete SewingSchedule
		delete b
		from #TOrder a 		
		inner join Production.dbo.SewingSchedule b on a.id=b.ID and b.FactoryID<>a.FTY_Group
		where a.qty > 0 and a.IsForecast = '0'

		--delete cutting
		delete b
		from #TOrder a 		
		inner join Production.dbo.Cutting b on a.id=b.ID and b.FactoryID<>a.FTY_Group
		where a.qty > 0 and a.IsForecast = '0'

		--delete order 
		delete b
		from #TOrder a 		
		inner join Production.dbo.Orders b on a.id=b.id and b.FtyGroup <> a.FTY_Group
		where a.qty > 0 and a.IsForecast = '0'
			
		--OrderComparisonList 比對 production.order
		Merge Production.dbo.OrderComparisonList as t
		Using (select b.id,b.qty,b.FactoryID,b.BuyerDelivery,
		 a.StyleID as AStyleID,a.FactoryID as AFactory 
		from #TOrder a		
		inner join Production.dbo.Orders b on a.id=b.id and a.factoryid <> b.factoryid
		where a.qty > 0 and a.IsForecast = '0'
		) as s
		on t.orderid=s.id and t.factoryid=s.factoryid and t.updateDate = @dToDay
		when matched then
			update set 
			t.TransferDate=@OldDate,
			t.OriginalQty=s.qty,
			t.OriginalBuyerDelivery=s.BuyerDelivery,
			t.DeleteOrder=1,
			t.OriginalStyleID=s.AStyleID,
			t.TransferToFactory =iif(s.AFactory is not null and s.AFactory in (select id from @Sayfty),s.AFactory,t.TransferToFactory)
		when not matched by target then 
		insert(OrderId,UpdateDate,FactoryID,TransferDate,OriginalQty,OriginalBuyerDelivery,DeleteOrder,OriginalStyleID,TransferToFactory)
		values(s.id,@dToDay,s.FactoryID,@OldDate,s.qty,s.BuyerDelivery,1,s.AStyleID,iif(s.AFactory is not null and s.AFactory in (select id from @Sayfty),s.AFactory,''));

		----OrderComparisonList 比對 Trade_To_Pms.order
		Merge Production.dbo.OrderComparisonList as t
		Using (select a.id,a.FactoryID,a.qty,a.BuyerDelivery,a.SciDelivery,a.styleid,a.KPILETA,a.LETA,a.CMPQDate
		,a.EachConsApv,a.MnorderApv,a.SMnorderApv,a.MnorderApv2
		, b.StyleID as AStyleID,b.FactoryID as AFactory 
		from #TOrder a		
		inner join Production.dbo.Orders b on a.id=b.id and a.factoryid <> b.factoryid
		where a.qty > 0 and a.IsForecast = '0'
		) as s
		on t.orderid=s.id and t.factoryid=s.factoryid and t.updateDate = @dToDay
		when matched then
			update set 
			t.NewQty=s.qty,
			t.NewBuyerDelivery=s.BuyerDelivery,
			t.NewSCIDelivery=s.SciDelivery,
			t.OriginalStyleID=s.styleid,
			t.KPILETA=s.KPILETA,
			t.OriginalLETA=s.LETA,
			t.TransferDate=@OldDate,
			t.NewOrder=1,
			t.NewCMPQDate=s.CMPQDate,
			t.NewEachConsApv=s.EachConsApv,
			t.OriginalMnorderApv=s.MnorderApv,
			t.OriginalSMnorderApv = s.SMnorderApv,
			t.MnorderApv2=s.MnorderApv2						
		when not matched by target then 
		insert(OrderId,UpdateDate,FactoryID,NewQty,NewBuyerDelivery,NewSCIDelivery,OriginalStyleID,KPILETA,OriginalLETA,TransferDate,NewOrder,
		NewCMPQDate,NewEachConsApv,OriginalMnorderApv,OriginalSMnorderApv,MnorderApv2)
		values(s.id,@dToDay,s.FactoryID,s.qty,s.BuyerDelivery,s.SciDelivery,styleid,KPILETA,LETA,@OldDate,1,CMPQDate,EachConsApv,MnorderApv,SMnorderApv,MnorderApv2);

	--需填入 Order.SDPDate = Buyer Delivery - 放假日(船期表)--
		update a
		set a.SDPDate = DATEADD(day,-1, a.BuyerDelivery)
		from #TOrder  a
		inner join Production.dbo.Factory b on a.FactoryID=b.ID
		inner join Production.dbo.Holiday c on b.id=c.factoryid and c.HolidayDate=a.BuyerDelivery
		
---------------------Order--------------------------------------
		--------------Order.id= AOrder.id  if eof()
		declare @OrderT table (ID varchar(13),isInsert bit) 

		Merge Production.dbo.Orders as t
		Using   #TOrder as s
		on t.id=s.id
		when matched then 
		update set
				t.ProgramID = s.    ProgramID ,
				t.ProjectID = s.    ProjectID ,
				t.Category = s.    Category ,
				t.OrderTypeID = s.    OrderTypeID ,
				t.BuyMonth = s.    BuyMonth ,
				t.Dest = s.       Dest ,
				t.Model = s.       Model ,
				t.HsCode1 = s.       HsCode1 ,
				t.HsCode2 = s.       HsCode2 ,
				t.PayTermARID = s.       PayTermARID ,
				t.ShipTermID = s.       ShipTermID ,
				t.ShipModeList = s.       ShipModeList ,
				t.PoPrice = s.       PoPrice ,
				t.CFMPrice = s.       CFMPrice ,
				t.CurrencyID = s.       CurrencyID ,
				t.Commission = s.       Commission ,
				t.BrandAreaCode = s.       BrandAreaCode ,
				t.BrandFTYCode = s.       BrandFTYCode ,
				t.CTNQty = s.       CTNQty ,
				t.CustCDID = s.       CustCDID ,
				t.CustPONo = s.       CustPONo ,
				t.Customize1 = s.       Customize1 ,
				t.Customize2 = s.       Customize2 ,
				t.Customize3 = s.       Customize3 ,
				t.CMPUnit = s.       CMPUnit ,
				t.CMPPrice = s.       CMPPrice ,
				t.CMPQDate = s.       CMPQDate ,
				t.CMPQRemark = s.       CMPQRemark ,
				t.EachConsApv = s.       EachConsApv ,
				t.MnorderApv = s.       MnorderApv ,
				t.CRDDate = s.       CRDDate ,
				t.InitialPlanDate = s.       InitialPlanDate ,
				t.PlanDate = s.       PlanDate ,
				t.FirstProduction = s.       FirstProduction ,
				t.FirstProductionLock = s.       FirstProductionLock ,
				t.OrigBuyerDelivery = s.       OrigBuyerDelivery ,
				t.ExCountry = s.       ExCountry ,
				t.InDCDate = s.       InDCDate ,
				t.CFMShipment = s.       CFMShipment ,
				t.PFETA = s.       PFETA ,
				t.PackLETA = s.       PackLETA ,
				t.LETA = s.       LETA ,
				t.MRHandle = s.       MRHandle ,
				t.SMR = s.       SMR ,
				t.ScanAndPack = s.       ScanAndPack ,
				t.VasShas = s.       VasShas ,
				t.SpecialCust = s.       SpecialCust ,
				t.TissuePaper = s.       TissuePaper ,
				t.Packing = s.       Packing ,
				t.SDPDate = s.SDPDate,
				t.MarkFront = s.       MarkFront ,
				t.MarkBack = s.       MarkBack ,
				t.MarkLeft = s.       MarkLeft ,
				t.MarkRight = s.       MarkRight ,
				t.Label = s.       Label ,
				t.OrderRemark = s.       OrderRemark ,
				t.ArtWorkCost = s.       ArtWorkCost ,
				t.StdCost = s.       StdCost ,
				t.CtnType = s.       CtnType ,
				t.FOCQty = s.       FOCQty ,
				t.SMnorderApv = s.       SMnorderApv ,
				t.FOC = s.       FOC ,
				t.MnorderApv2 = s.       MnorderApv2 ,
				t.Packing2 = s.       Packing2 ,
				t.SampleReason = s.       SampleReason ,
				t.RainwearTestPassed = s.       RainwearTestPassed ,
				t.SizeRange = s.       SizeRange ,
				t.MTLComplete = s.       MTLComplete ,
				t.SpecialMark = s.       SpecialMark ,
				t.OutstandingRemark = iif((s.OutstandingDate <= t.OutstandingDate AND s.OutstandingDate is null) OR (s.OutstandingDate is not null  AND s.OutstandingDate <= t.OutstandingDate),t.OutstandingRemark,s.OutstandingRemark),
				t.OutstandingInCharge = iif((s.OutstandingDate <= t.OutstandingDate AND s.OutstandingDate is null) OR (s.OutstandingDate is not null  AND s.OutstandingDate <= t.OutstandingDate),t.OutstandingInCharge,s.OutstandingInCharge),
				t.OutstandingDate =  iif((s.OutstandingDate <= t.OutstandingDate AND s.OutstandingDate is null) OR (s.OutstandingDate is not null  AND s.OutstandingDate <= t.OutstandingDate),t.OutstandingDate,s.OutstandingDate),
				t.OutstandingReason = iif((s.OutstandingDate <= t.OutstandingDate AND s.OutstandingDate is null) OR (s.OutstandingDate is not null  AND s.OutstandingDate <= t.OutstandingDate),t.OutstandingReason,s.OutstandingReason),
				t.StyleUkey = s.       StyleUkey ,
				t.POID = s.       POID ,
				t.IsNotRepeatOrMapping = s.       IsNotRepeatOrMapping ,
				t.SplitOrderId = s.       SplitOrderId ,
				t.FtyKPI = s.       FtyKPI ,
				t.EditName = iif((s.EditDate <= t.EditDate AND s.EditDate is null) OR (s.EditDate is not null AND s.EditDate <= t.EditDate),t.EditName, s.EditName) ,
				t.EditDate = iif((s.EditDate <= t.EditDate AND s.EditDate is null) OR (s.EditDate is not null AND s.EditDate <= t.EditDate),t.EditDate, s.EditDate) ,
				t.SewLine = '' ,
				t.IsForecast = s.       IsForecast ,
				t.PulloutComplete =iif((s.GMTComplete='C' OR s.GMTComplete='S') and t.PulloutComplete=0  ,1,t.PulloutComplete),
				t.PFOrder = s.       PFOrder ,
				t.KPILETA = s.       KPILETA ,
				t.MTLETA = s.       MTLETA ,
				t.SewETA = s.       SewETA ,
				t.PackETA = s.       PackETA ,
				t.MTLExport = s.       MTLExport ,
				t.DoxType = s.       DoxType ,
				t.FtyGroup = s.       FTY_Group ,
				t.MDivisionID = s.       MDivisionID ,
				t.KPIChangeReason = s.       KPIChangeReason ,
				t.MDClose = iif((s.GMTComplete='C' OR s.GMTComplete='S') and t.PulloutComplete=0  ,@dToDay,t.MDClose),
				t.CPUFactor = s.       CPUFactor ,
				t.SizeUnit = s.       SizeUnit ,
				t.CuttingSP = s.       CuttingSP ,
				t.IsMixMarker = s.       IsMixMarker ,
				t.EachConsSource = s.       EachConsSource ,
				t.KPIEachConsApprove = s.       KPIEachConsApprove ,
				t.KPICmpq = s.       KPICmpq ,
				t.KPIMNotice = s.       KPIMNotice ,
				t.GMTComplete  = s.       GMTComplete  ,
				t.GFR = s.       GFR 		
		when not matched by target then
insert(ID,	 BrandID,   ProgramID,   StyleID,   SeasonID,   ProjectID,     Category,   OrderTypeID,   BuyMonth,   Dest,   Model,   HsCode1,   HsCode2,   PayTermARID,   ShipTermID,   ShipModeList,   CdCodeID,   CPU,   Qty,   StyleUnit,   PoPrice,   CFMPrice,   CurrencyID,   Commission,   FactoryID,   BrandAreaCode,   BrandFTYCode,   CTNQty,   CustCDID,   CustPONo,   Customize1,   Customize2,   Customize3,   CFMDate,   BuyerDelivery,   SciDelivery,   SewOffLine,   CutInLine,   CutOffLine,   PulloutDate,   CMPUnit,   CMPPrice,   CMPQDate,  CMPQRemark,    EachConsApv,   MnorderApv,   CRDDate,   InitialPlanDate,   PlanDate,   FirstProduction,   FirstProductionLock,   OrigBuyerDelivery,   ExCountry,   InDCDate,   CFMShipment,   PFETA,   PackLETA,   LETA,   MRHandle,   SMR,   ScanAndPack,   VasShas,   SpecialCust,   TissuePaper,   Junk,   Packing,   MarkFront,   MarkBack,   MarkLeft,   MarkRight,   Label,   OrderRemark,   ArtWorkCost,   StdCost,   CtnType,   FOCQty,   SMnorderApv,   FOC,   MnorderApv2,   Packing2,   SampleReason,   RainwearTestPassed,   SizeRange,   MTLComplete,   SpecialMark,   OutstandingRemark,   OutstandingInCharge,   OutstandingDate,   OutstandingReason,   StyleUkey,   POID,   IsNotRepeatOrMapping,   SplitOrderId,   FtyKPI,   AddName,   AddDate,   EditName,   EditDate,   IsForecast,GMTComplete,                                          PFOrder,    InspDate,   KPILETA,   MTLETA,   SewETA,   PackETA,   MTLExport,   DoxType,   FtyGroup,    MDivisionID,   MCHandle,                                                                                                    KPIChangeReason,       MDClose,                                                   CPUFactor,   SizeUnit,   CuttingSP,   IsMixMarker,   EachConsSource,   KPIEachConsApprove,   KPICmpq,   KPIMNotice,   GFR,SDPDate )
values(s.ID ,s.BrandID ,s.ProgramID ,s.StyleID ,s.SeasonID ,s.ProjectID ,s.Category ,s.OrderTypeID ,s.BuyMonth ,s.Dest ,s.Model ,s.HsCode1 ,s.HsCode2 ,s.PayTermARID ,s.ShipTermID ,s.ShipModeList ,s.CdCodeID ,s.CPU ,s.Qty ,s.StyleUnit ,s.PoPrice ,s.CFMPrice ,s.CurrencyID ,s.Commission ,s.FactoryID ,s.BrandAreaCode ,s.BrandFTYCode ,s.CTNQty ,s.CustCDID ,s.CustPONo ,s.Customize1 ,s.Customize2 ,s.Customize3 ,s.CFMDate ,s.BuyerDelivery ,s.SciDelivery ,s.SewOffLine ,s.CutInLine ,s.CutOffLine ,s.PulloutDate ,s.CMPUnit ,s.CMPPrice ,s.CMPQDate ,s.CMPQRemark ,s.EachConsApv ,s.MnorderApv ,s.CRDDate ,s.InitialPlanDate ,s.PlanDate ,s.FirstProduction ,s.FirstProductionLock ,s.OrigBuyerDelivery ,s.ExCountry ,s.InDCDate ,s.CFMShipment ,s.PFETA ,s.PackLETA ,s.LETA ,s.MRHandle ,s.SMR ,s.ScanAndPack ,s.VasShas ,s.SpecialCust ,s.TissuePaper ,s.Junk ,s.Packing ,s.MarkFront ,s.MarkBack ,s.MarkLeft ,s.MarkRight ,s.Label ,s.OrderRemark ,s.ArtWorkCost ,s.StdCost ,s.CtnType ,s.FOCQty ,s.SMnorderApv ,s.FOC ,s.MnorderApv2 ,s.Packing2 ,s.SampleReason ,s.RainwearTestPassed ,s.SizeRange ,s.MTLComplete ,s.SpecialMark ,s.OutstandingRemark ,s.OutstandingInCharge ,s.OutstandingDate ,s.OutstandingReason ,s.StyleUkey ,s.POID ,s.IsNotRepeatOrMapping ,s.SplitOrderId ,s.FtyKPI ,s.AddName ,s.AddDate ,s.EditName ,s.EditDate ,s.IsForecast,iif(s.GMTComplete='P' or s.GMTComplete is null,0,1) ,s.PFOrder ,s.InspDate ,s.KPILETA ,s.MTLETA ,s.SewETA ,s.PackETA ,s.MTLExport ,s.DoxType ,s.FTY_Group ,s.MDivisionID , (select localMR from Production.dbo.Style where BrandID=s.BrandID and id=s.styleid and SeasonID=s.SeasonID),s.KPIChangeReason , iif(s.GMTComplete='P' or s.GMTComplete is null,null,@dToDay) ,s.CPUFactor ,s.SizeUnit ,s.CuttingSP ,s.IsMixMarker ,s.EachConsSource ,s.KPIEachConsApprove ,s.KPICmpq ,s.KPIMNotice ,s.GFR,s.SDPDate )
		output inserted.id, iif(deleted.id='',1,0) into @OrderT; --將insert =1 , update =0 把改變過的id output;


		
		-----------TrsOrder AOrder<>Order ----------------
		Merge Production.dbo.OrderComparisonList as t
		Using ( select * from #Torder where id in (select id from @OrderT where isInsert=1)) as s
		on t.orderid=s.id and t.factoryid=s.factoryid and t.updateDate = @dToDay
		when matched then
			update set
			t.NewQty = s.Qty,
			t.NewBuyerDelivery = s.BuyerDelivery, 
			t.NewSCIDelivery =s.SciDelivery, 
			t.OriginalStyleID = s.StyleID, 
			t.KPILETA =s.KPILETA, 
			t.NewLETA =s.LETA,
			t.TransferDate = @OldDate, 
			t.NewOrder =1,
			t.NewCMPQDate = s.CMPQDate, 
			t.NewEachConsApv = s.EachConsApv,
			t.OriginalMnorderApv =s.MnorderApv, 
			t.OriginalSMnorderApv = s.SMnorderApv,
			t.MnorderApv2 = s.MnorderApv2
		when not matched by target then 
			insert(OrderId,UpdateDate,FactoryID,NewQty,NewBuyerDelivery, NewSCIDelivery , OriginalStyleID ,KPILETA, NewLETA ,TransferDate, NewOrder ,NewCMPQDate, NewEachConsApv,OriginalMnorderApv,OriginalSMnorderApv ,MnorderApv2)
			values(s.Id,@dToDay,s.FactoryID,s.Qty,s.BuyerDelivery,s.SciDelivery,s.StyleID,s.KPILETA,s.LETA,@OldDate,1, s.CMPQDate, s.EachConsApv,s.MnorderApv, s.SMnorderApv,s.MnorderApv2);

		-----------TrsOrder AOrder=Order ----------------
		Merge Production.dbo.OrderComparisonList as t
		Using ( select A.ID,A.FactoryID,a.qty ,A.BuyerDelivery,A.SciDelivery,A.CMPQDate,A.EachConsApv,A.MnorderApv,A.SMnorderApv,A.MnorderApv2,A.Junk,A.KPILETA,A.LETA,
		iif(a.qty<>b.qty,1,0) as diffQty,b.qty as Aqty,
		iif(a.BuyerDelivery<>b.BuyerDelivery,1,0) as diffDiv, b.BuyerDelivery as ABuyerDelivery,
		iif(a.SciDelivery <> b.SciDelivery,1,0) as diffSciD, b.SciDelivery as ASciDelivery,
		b.StyleID as AStyle,
		iif(a.CMPQDate <> b.CMPQDate,1,0) as diffCmpD, b.CMPQDate as ACMPQDate,
		iif(a.EachConsApv <> b.EachConsApv ,1,0) as diffCutD, b.EachConsApv as ACutDate,
		iif(a.MnorderApv <> b.MnorderApv,1,0) as diffMnorderApv, b.MnorderApv as AMnorderApv,
		iif(a.SMnorderApv <> b.SMnorderApv,1,0) as diffSMnorderApv, b.SMnorderApv as ASMnorderApv,
		iif(a.MnorderApv2 <> b.MnorderApv2,1,0) as diffMnorderApv2, b.MnorderApv2 as AMnorderApv2,
		iif(a.Junk <> b.Junk,1,0) as diffJunk,b.Junk as AJunk,
		iif(isnull(a.KPILETA,'')<>'' and a.KPILETA <> b.KPILETA,1,0) as diffKPILETA,b.LETA as ALETA
		from Production.dbo.Orders a 
		inner join #Torder b on a.id=b.id
		where a.id in (select id from @OrderT where isInsert=0)
		AND (A.QTY <> B.QTY OR A.BuyerDelivery <> B.BuyerDelivery OR A.StyleID <> B.StyleID OR A.EachConsApv<>B.EachConsApv OR A.CMPQDate<>B.CMPQDate OR A.SciDelivery<>B.SciDelivery OR A.MnorderApv<>B.MnorderApv 
		OR A.SMnorderApv<>B.SMnorderApv OR A.MnorderApv2<>B.MnorderApv2 OR A.Junk<>B.Junk OR ISNULL(A.KPILETA,'')='')
		AND A.LETA <> B.LETA
		) as s
		on t.orderid=s.id and t.updateDate = @dToDay
			when matched then
				update set
				t.OriginalQty =iif(diffQty=1,s.qty,t.OriginalQty),
				t.NewQty = iif(diffQty=1,s.Aqty,t.NewQty),
				t.OriginalBuyerDelivery = iif(diffDiv=1 or diffSciD=1,s.BuyerDelivery,t.OriginalBuyerDelivery),
				t.NewBuyerDelivery = iif(diffDiv=1 or diffSciD=1,s.ABuyerDelivery,t.NewBuyerDelivery),
				t.OriginalSCIDelivery=iif(diffSciD=1,s.SciDelivery,t.OriginalSCIDelivery),
				t.NewSCIDelivery = iif(diffSciD=1,s.ASciDelivery,t.NewSCIDelivery),
				t.OriginalStyleID = s.AStyle,
				t.OriginalCMPQDate = iif(diffCmpD=1,s.CMPQDate,t.OriginalCMPQDate),
				t.NewCMPQDate = iif(diffCmpD=1,s.ACMPQDate,t.NewCMPQDate),
				t.OriginalEachConsApv = iif(diffCutD=1, s.EachConsApv,t.OriginalEachConsApv),
				t.NewEachConsApv = iif(diffCutD=1,s.ACutDate,t.NewEachConsApv),
				t.OriginalMnorderApv = iif(diffMnorderApv=1,s.MnorderApv,t.OriginalMnorderApv),
				t.NewMnorderApv = iif(diffMnorderApv=1,s.AMnorderApv,t.NewMnorderApv),
				t.OriginalSMnorderApv = iif(diffSMnorderApv=1,s.SMnorderApv,t.OriginalSMnorderApv),
				t.NewSMnorderApv = iif(diffSMnorderApv=1,s.ASMnorderApv,t.NewSMnorderApv),
				t.MnorderApv2 = iif(diffMnorderApv2=1,s.AMnorderApv2,t.MnorderApv2),
				t.JunkOrder = iif(diffJunk=1,s.AJunk,t.JunkOrder),
				t.KPILETA = iif(diffKPILETA=1,s.KPILETA,t.KPILETA),
				t.OriginalLETA= iif(diffKPILETA=1,s.LETA,t.OriginalLETA),
				t.NewLETA=iif(diffKPILETA=1,s.ALETA,t.NewLETA)
			when not matched by target then 
				insert(orderid,UpdateDate,TransferDate, factoryid,OriginalQty,                       NewQty,                        OriginalBuyerDelivery,                                                NewBuyerDelivery,                                                 OriginalSCIDelivery,                                    NewSCIDelivery,                              OriginalStyleID,OriginalCMPQDate,NewCMPQDate,OriginalEachConsApv,NewEachConsApv,OriginalMnorderApv,NewMnorderApv,OriginalSMnorderApv,NewSMnorderApv,MnorderApv2,JunkOrder,KPILETA,OriginalLETA,NewLETA)
				values(s.Id,   @dToDay,   @OldDate,   s.FactoryID,iif(diffQty=1,s.qty,0),iif(diffQty=1,s.Aqty,0),iif(diffDiv=1 or diffSciD=1,s.BuyerDelivery,''), iif(diffDiv=1 or diffSciD=1,s.ABuyerDelivery,''), iif(diffSciD=1,s.SciDelivery,''), iif(diffSciD=1,s.ASciDelivery,''),s.AStyle,iif(diffCmpD=1,s.CMPQDate,''),iif(diffCmpD=1,s.ACMPQDate,''),iif(diffCutD=1, s.EachConsApv,''),iif(diffCutD=1,s.ACutDate,''),
				iif(diffMnorderApv=1,s.MnorderApv,''),iif(diffMnorderApv=1,s.AMnorderApv,''),iif(diffSMnorderApv=1,s.SMnorderApv,''),iif(diffSMnorderApv=1,s.ASMnorderApv,''),
				iif(diffMnorderApv2=1,s.AMnorderApv2,''),iif(diffJunk=1,s.AJunk,0),iif(diffKPILETA=1,s.KPILETA,''),iif(diffKPILETA=1,s.LETA,''),iif(diffKPILETA=1,s.ALETA,''));



	--------------Order_Qty--------------------------Qty BreakDown

	Merge Production.dbo.Order_Qty as t
	Using (select a.* from Trade_To_Pms.dbo.order_qty a inner join #Torder  b on a.id=b.id) as s
	on t.id=s.id AND T.ARTICLE=S.ARTICLE AND t.sizeCode=s.sizeCode
	when matched then
		update set
		t.Qty = s.		 Qty ,
		t.AddName = s.	     AddName ,
		t.AddDate = s.	     AddDate ,
		t.EditName = s.	      EditName ,
		t.EditDate = s.	      EditDate 
	when not matched by target then 
		insert(ID ,Article ,SizeCode ,Qty ,AddName ,AddDate ,EditName ,EditDate )
		values(s.ID ,s.Article ,s.SizeCode ,s.Qty ,s.AddName ,s.AddDate ,s.EditName ,s.EditDate )
	when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then
	delete;

	----------Order_QtyShip--------------
	Merge Production.dbo.Order_QtyShip as t
	using (select a.* from Trade_To_Pms.dbo.Order_QtyShip a inner join #Torder b on a.id=b.id) as s
	on t.id=s.id and t.seq=s.seq
		when matched then 
		update set
		t.ShipmodeID = s.       ShipmodeID ,
		t.BuyerDelivery = s.       BuyerDelivery ,
		t.FtyKPI = s.       FtyKPI ,
		t.ReasonID = s.       ReasonID ,
		t.Qty = s.       Qty ,
		t.AddName = s.       AddName ,
		t.AddDate = s.       AddDate ,
		t.EditName = s.       EditName ,
		t.EditDate = s.       EditDate  
	when not matched by target then
		insert(  Id ,  Seq ,  ShipmodeID ,  BuyerDelivery ,  FtyKPI ,  ReasonID ,  Qty ,  AddName ,  AddDate ,  EditName ,  EditDate )
		values(s.Id ,s.Seq ,s.ShipmodeID ,s.BuyerDelivery ,s.FtyKPI ,s.ReasonID ,s.Qty ,s.AddName ,s.AddDate ,s.EditName ,s.EditDate )
	when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
	delete;

	-----------Order_QtyShip_Detail--------------------------
		Merge Production.dbo.Order_QtyShip_detail as t
		Using (select a.* from Trade_To_Pms.dbo.Order_QtyShip_detail as a inner join #Torder b on a.id=b.id ) as s
		on t.ukey=s.ukey
		when matched then
			update set
			t.Seq = s.Seq ,
			t.Article = s.Article ,
			t.SizeCode = s.SizeCode ,
			t.Qty = s.Qty ,
			t.AddName = s.AddName ,
			t.AddDate = s.AddDate ,
			t.EditName = s.EditName ,
			t.EditDate = s.EditDate 
		when not matched by target then 
			insert (Id ,Seq ,Article ,SizeCode ,Qty ,AddName ,AddDate ,EditName ,EditDate ,Ukey )
			values (s.Id ,s.Seq ,s.Article ,s.SizeCode ,s.Qty ,s.AddName ,s.AddDate ,s.EditName ,s.EditDate ,s.Ukey )
		when not matched by source  AND T.ID IN (SELECT ID FROM #Torder) then 
		delete;

		-----------------Order_UnitPrice------------
		Merge Production.dbo.Order_UnitPrice as t
		Using (select a.* from Trade_To_Pms.dbo.Order_UnitPrice a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.article=s.article and t.sizecode=s.sizecode
		when Matched then
			update set			
			t.POPrice = s.POPrice ,
			t.QuotCost = s.QuotCost ,
			t.DestPrice = s.DestPrice ,
			t.AddName = s.AddName ,
			t.AddDate = s.AddDate ,
			t.EditName = s.EditName ,
			t.EditDate = s.EditDate 
		when not Matched by target then
			insert(Id ,Article ,SizeCode ,POPrice ,QuotCost ,DestPrice ,AddName ,AddDate ,EditName ,EditDate )
			values(s.Id ,s.Article ,s.SizeCode ,s.POPrice ,s.QuotCost ,s.DestPrice ,s.AddName ,s.AddDate ,s.EditName ,s.EditDate )
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
				delete;

		--------------Order_TmsCost-----TMS & Cost
		Merge  Production.dbo.Order_TmsCost as t
		Using  (select a.* from Trade_To_Pms.dbo.Order_TmsCost a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.ArtworkTypeID=s.ArtworkTypeID
		when matched then 
			update set			
			t.Seq= s.Seq,
			t.Qty= s.Qty,
			t.ArtworkUnit= s.ArtworkUnit,
			t.TMS= s.TMS,
			t.Price= s.Price,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
		delete;

		------------------  insert Order_TmsCost
		INSERT INTO Production.dbo.Order_TmsCost(ID,ArtworkTypeID,Seq,Qty,ArtworkUnit,TMS,Price,InhouseOSP,LocalSuppID,AddName,AddDate,EditName,EditDate)
		SELECT A.ID,A.ArtworkTypeID,A.Seq,A.Qty,A.ArtworkUnit,A.TMS,A.Price,C.InhouseOSP,
		IIF(C.InhouseOSP='O',
		(SELECT top 1 t.LocalSuppId FROM Production.dbo.Style_Artwork_Quot T
		inner join  production.dbo.Style_Artwork a on t.Ukey=a.Ukey
		inner join Trade_To_Pms.DBO.Order_TmsCost  b on a.ArtworkTypeID=b.ArtworkTypeID
		WHERE T.Ukey IN (SELECT A.Ukey 
		FROM Production.dbo.Style A	
		INNER JOIN #TOrder B ON A.ID=B.StyleID AND A.BRANDID=B.BrandID AND A.SeasonID=B.SeasonID)
		and t.Ukey=36351  ),
		(SELECT LocalSuppID FROM Production.dbo.Order_TmsCost WHERE ID=A.ID)),A.AddName,A.AddDate,A.EditName,A.EditDate 
		FROM Trade_To_Pms.dbo.Order_TmsCost A
		INNER JOIN #TOrder B ON A.ID=B.ID
		INNER JOIN Production.dbo.ArtworkType C ON A.ID=C.ID
		
	

		-----------------Order_SizeCode---------------------------尺寸表 Size Spec(存尺寸碼)
		Merge Production.dbo.Order_SizeCode as t
		Using (select a.* from Trade_To_Pms.dbo.Order_SizeCode a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.sizecode=s.sizecode
		when matched then
			update set
			t.Seq= s.Seq,
			t.SizeGroup= s.SizeGroup
		When not matched by target then 
			insert(Id,Seq,SizeGroup,SizeCode)
			values(s.Id,s.Seq,s.SizeGroup,s.SizeCode)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;	

		----------------Order_Sizeitem------------------------------尺寸表 Size Spec(存量法資料)
		Merge Production.dbo.Order_Sizeitem as t
		Using (select a.* from Trade_To_Pms.dbo.Order_Sizeitem a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.sizeitem=s.sizeitem
		when matched then 
			update set 			
			t.SizeUnit= s.SizeUnit,
			t.SizeDesc= s.Description
		when not matched by Target then
			insert(Id,SizeItem,SizeUnit,SizeDesc)
			values(s.Id,s.SizeItem,s.SizeUnit,s.Description)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;
	
		-------------Order_SizeSpec--------------------------------尺寸表 Size Spec(存尺寸碼)
		Merge Production.dbo.Order_SizeSpec as t
		Using (select a.* from Trade_To_Pms.dbo.Order_SizeSpec a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.sizeitem=s.sizeitem and t.sizecode=s.sizecode
		when matched then 
			update set
			t.SizeSpec= s.SizeSpec
		when not matched by target then
			insert(Id,SizeItem,SizeCode,SizeSpec)
			values(s.Id,s.SizeItem,s.SizeCode,s.SizeSpec)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;

------------Order_ColorCombo---------------(主料配色表)
		Merge Production.dbo.Order_ColorCombo as t
		Using (select a.* from Trade_To_Pms.dbo.Order_ColorCombo a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.article=s.article and t.lectracode=s.lectracode
		when matched then 
			update set
			t.ColorID= s.ColorID,
			t.FabricCode= s.FabricCode,
			t.PatternPanel= s.PatternPanel,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate
		when not matched by target then 
			insert(Id,Article,ColorID,FabricCode,LectraCode,PatternPanel,AddName,AddDate,EditName,EditDate)
			values(s.Id,s.Article,s.ColorID,s.FabricCode,s.LectraCode,s.PatternPanel,s.AddName,s.AddDate,s.EditName,s.EditDate)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;
			
	
		-------------Order_FabricCode------------------部位vs布別vsQT
		Merge Production.dbo.Order_FabricCode as t
		Using (select a.* from Trade_To_Pms.dbo.Order_FabricCode a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.Lectracode=s.Lectracode
		when matched then 
			update set
			t.PatternPanel= s.PatternPanel,
			t.FabricCode= s.FabricCode,
			t.Lectracode= s.Lectracode,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate,
			t.Order_BOFUkey= s.Order_BOFUkey
		when not matched by target then 
			insert(Id,PatternPanel,FabricCode,Lectracode,AddName,AddDate,EditName,EditDate,Order_BOFUkey)
			values(s.Id,s.PatternPanel,s.FabricCode,s.Lectracode,s.AddName,s.AddDate,s.EditName,s.EditDate,s.Order_BOFUkey)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;

		-------------Order_Bof -----------------------Bill of Fabric

		Merge Production.dbo.Order_Bof as t
		Using (select a.* from Trade_To_Pms.dbo.Order_Bof a inner join #TOrder b on a.id=b.id) as s
		on t.ukey=s.ukey	
		when matched then 
			update set
			t.FabricCode= s.FabricCode,
			t.Refno= s.Refno,
			t.SCIRefno= s.SCIRefno,
			t.SuppID= s.SuppID,
			t.ConsPC= s.ConsPC,
			t.Seq1= s.Seq1,
			t.Kind= s.Kind,
			t.Remark= s.Remark,
			t.LossType= s.LossType,
			t.LossPercent= s.LossPercent,
			t.RainwearTestPassed= s.RainwearTestPassed,
			t.HorizontalCutting= s.HorizontalCutting,
			t.ColorDetail= s.ColorDetail,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate
		when not matched by target then 
			insert(Id,FabricCode,Refno,SCIRefno,SuppID,ConsPC,Seq1,Kind,Ukey,Remark,LossType,LossPercent,RainwearTestPassed,HorizontalCutting,ColorDetail,AddName,AddDate,EditName,EditDate)
			values(s.Id,s.FabricCode,s.Refno,s.SCIRefno,s.SuppID,s.ConsPC,s.Seq1,s.Kind,s.Ukey,s.Remark,s.LossType,s.LossPercent,s.RainwearTestPassed,s.HorizontalCutting,s.ColorDetail,s.AddName,s.AddDate,s.EditName,s.EditDate)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;

		---------Order_Bof_Expend--------------Bill of Fabric -用量展開
		Merge Production.dbo.Order_Bof_Expend as t
		Using (select a.* from Trade_To_Pms.dbo.Order_Bof_Expend a
		inner join #TOrder b on a.id=b.id) as s
		on t.ukey=s.ukey
		when matched then 
			update set
			t.Id= s.Id,
			t.Order_BOFUkey= s.Order_BOFUkey,
			t.ColorId= s.ColorId,
			t.SuppColor= s.SuppColor,
			t.OrderQty= s.OrderQty,
			t.Price= s.Price,
			t.UsageQty= s.UsageQty,
			t.UsageUnit= s.UsageUnit,
			t.Width= s.Width,
			t.SysUsageQty= s.SysUsageQty,
			t.QTLectraCode= s.QTLectraCode,
			t.Remark= s.Remark,
			t.OrderIdList= s.OrderIdList,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate
		when not matched by target then 
			insert(  Id,  Order_BOFUkey,  ColorId,  SuppColor,  OrderQty,  Price,  UsageQty,  UsageUnit,  Width,  SysUsageQty,  QTLectraCode,  Remark,  OrderIdList,  AddName,  AddDate,  EditName,  EditDate,UKEY)
			values(s.Id,s.Order_BOFUkey,s.ColorId,s.SuppColor,s.OrderQty,s.Price,s.UsageQty,s.UsageUnit,s.Width,s.SysUsageQty,s.QTLectraCode,s.Remark,s.OrderIdList,s.AddName,s.AddDate,s.EditName,s.EditDate,s.UKEY)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;

		-------------Order_BOA------------------Bill of Accessory

		Merge Production.dbo.Order_BOA as t
		Using (select a.* from Trade_To_Pms.dbo.Order_BOA a inner join #TOrder b on a.id=b.id) as s
		on t.ukey=s.ukey
		when matched then 
			update set
			t.Refno= s.Refno,
			t.SCIRefno= s.SCIRefno,
			t.SuppID= s.SuppID,
			t.Seq= s.Seq1,
			t.ConsPC= s.ConsPC,
			t.BomTypeSize= s.BomTypeSize,
			t.BomTypeColor= s.BomTypeColor,			
			t.PatternPanel= s.PatternPanel,
			t.SizeItem= s.SizeItem,
			t.BomTypeZipper= s.BomTypeZipper,
			t.Remark= s.Remark,
			t.ProvidedPatternRoom= s.ProvidedPatternRoom,
			t.ColorDetail= s.ColorDetail,
			t.isCustCD= s.isCustCD,
			t.lossType= s.lossType,
			t.LossPercent= s.LossPercent,
			t.LossQty= s.LossQty,
			t.LossStep= s.LossStep,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate,
			t.SizeItem_Elastic= s.SizeItem_Elastic,
			t.BomTypeFactory= s.BomTypeFactory,
			t.BomTypePo= s.BomTypePo
		when not matched by target then
			insert(Id,Ukey,Refno,SCIRefno,SuppID,Seq,ConsPC,BomTypeSize,PatternPanel,SizeItem,BomTypeZipper,Remark,ProvidedPatternRoom,ColorDetail,isCustCD,lossType,LossPercent,LossQty,LossStep,AddName,AddDate,EditName,EditDate,SizeItem_Elastic,BomTypeFactory,BomTypePo)			
			values(s.Id,s.Ukey,s.Refno,s.SCIRefno,s.SuppID,s.Seq1,s.ConsPC,s.BomTypeSize,s.PatternPanel,s.SizeItem,s.BomTypeZipper,s.Remark,s.ProvidedPatternRoom,s.ColorDetail,s.isCustCD,s.lossType,s.LossPercent,s.LossQty,s.LossStep,s.AddName,s.AddDate,s.EditName,s.EditDate,s.SizeItem_Elastic,s.BomTypeFactory,s.BomTypePo)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;

		-----------------Order_BOA_Expend----------------Bill of accessory -用量展開
		Merge Production.dbo.Order_BOA_Expend as t
		Using (select a.* from Trade_To_Pms.dbo.Order_BOA_Expend a	inner join #TOrder b on a.id=b.id) as s
		on t.ukey=s.ukey
		when matched then 
			update set
			t.Order_BOAUkey= s.Order_BOAUkey,
			t.OrderQty= s.OrderQty,
			t.Refno= s.Refno,
			t.SCIRefno= s.SCIRefno,
			t.Price= s.Price,
			t.UsageQty= s.UsageQty,
			t.UsageUnit= s.UsageUnit,
			t.Article= s.Article,
			t.ColorId= s.ColorId,
			t.SuppColor= s.SuppColor,
			t.SizeCode= s.SizeCode,
			t.Sizespec= s.Sizespec,
			t.SizeUnit= s.SizeUnit,
			t.OrderIdList= s.OrderIdList,
			t.SysUsageQty= s.SysUsageQty,
			t.Remark= s.Remark,			
			t.BomZipperInsert= s.BomZipperInsert,			
			t.BomCustPONo= s.BomCustPONo,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate
		when not matched by target then
			insert(Id,UKEY,Order_BOAUkey,OrderQty,Refno,SCIRefno,Price,UsageQty,UsageUnit,Article,ColorId,SuppColor,SizeCode,Sizespec,SizeUnit,OrderIdList,SysUsageQty,Remark,BomZipperInsert,BomCustPONo,AddName,AddDate,EditName,EditDate)			
			values(s.Id,s.UKEY,s.Order_BOAUkey,s.OrderQty,s.Refno,s.SCIRefno,s.Price,s.UsageQty,s.UsageUnit,s.Article,s.ColorId,s.SuppColor,s.SizeCode,s.Sizespec,s.SizeUnit,s.OrderIdList,s.SysUsageQty,s.Remark,s.BomZipperInsert,s.BomCustPONo,s.AddName,s.AddDate,s.EditName,s.EditDate)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;

		---------------Order_MarkerList------------Marker List

		Merge Production.dbo.Order_MarkerList as t
		Using (select a.* from Trade_To_Pms.dbo.Order_MarkerList a inner join #TOrder b on a.id=b.id) as s
		on t.ukey=s.ukey	
		when matched then 
			update set
			t.Seq= s.Seq,
			t.MarkerName= s.MarkerName,
			t.FabricCode= s.FabricCode,
			t.FabricCombo= s.FabricCombo,
			t.LectraCode= s.LectraCode,
			t.isQT= s.isQT,
			t.MarkerLength= s.MarkerLength,
			t.ConsPC= s.ConsPC,
			t.Cuttingpiece= s.Cuttingpiece,
			t.ActCuttingPerimeter= s.ActCuttingPerimeter,
			t.StraightLength= s.StraightLength,
			t.CurvedLength= s.CurvedLength,
			t.Efficiency= s.Efficiency,
			t.Remark= s.Remark,
			t.MixedSizeMarker= s.MixedSizeMarker,
			t.MarkerNo= s.MarkerNo,
			t.MarkerUpdate= s.MarkerUpdate,
			t.MarkerUpdateName= s.MarkerUpdateName,
			t.AllSize= s.AllSize,
			t.PhaseID= s.PhaseID,
			t.SMNoticeID= s.SMNoticeID,
			t.MarkerVersion= s.MarkerVersion,
			t.Direction= s.Direction,
			t.CuttingWidth= s.CuttingWidth,
			t.Width= s.Width,
			t.Type= s.Type,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate
		when not matched by target then
			insert(Id,Ukey,Seq,MarkerName,FabricCode,FabricCombo,LectraCode,isQT,MarkerLength,ConsPC,Cuttingpiece,ActCuttingPerimeter,StraightLength,CurvedLength,Efficiency,Remark,MixedSizeMarker,MarkerNo,MarkerUpdate,MarkerUpdateName,AllSize,PhaseID,SMNoticeID,MarkerVersion,Direction,CuttingWidth,Width,Type,AddName,AddDate,EditName,EditDate)
			values(s.Id,s.Ukey,s.Seq,s.MarkerName,s.FabricCode,s.FabricCombo,s.LectraCode,s.isQT,s.MarkerLength,s.ConsPC,s.Cuttingpiece,s.ActCuttingPerimeter,s.StraightLength,s.CurvedLength,s.Efficiency,s.Remark,s.MixedSizeMarker,s.MarkerNo,s.MarkerUpdate,s.MarkerUpdateName,s.AllSize,s.PhaseID,s.SMNoticeID,s.MarkerVersion,s.Direction,s.CuttingWidth,s.Width,s.Type,s.AddName,s.AddDate,s.EditName,s.EditDate)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;

		------Order_MarkerList_SizeQty----------------
		Merge Production.dbo.Order_MarkerList_SizeQty as t
		Using (select a.* from Trade_To_Pms.dbo.Order_MarkerList_SizeQty a inner join #TOrder b on a.id=b.id) as s
		on t.order_MarkerListUkey=s.order_MarkerListUkey and t.sizecode=s.sizecode
		when matched then 
			update set
			t.id=s.id,
			t.SizeCode= s.SizeCode,
			t.Qty= s.Qty
		when not matched by target then
			insert(Order_MarkerListUkey,Id,SizeCode,Qty)
			values(s.Order_MarkerListUkey,s.Id,s.SizeCode,s.Qty)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;

		--------Order_ArtWork-----------------
		Merge Production.dbo.Order_ArtWork as t
		Using (select a.* from Trade_To_Pms.dbo.Order_ArtWork a inner join #TOrder b on a.id=b.id) as s
		on t.ukey=s.ukey	
		when matched then 
			update set
			t.ArtworkTypeID= s.ArtworkTypeID,
			t.Article= s.Article,
			t.PatternCode= s.PatternCode,
			t.PatternDesc= s.PatternDesc,
			t.ArtworkID= s.ArtworkID,
			t.ArtworkName= s.ArtworkName,
			t.Qty= s.Qty,
			t.TMS= s.TMS,
			t.Price= s.Price,
			t.Cost= s.Cost,
			t.Remark= s.Remark,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate
		when not matched by target then 
			insert(ID,ArtworkTypeID,Article,PatternCode,PatternDesc,ArtworkID,ArtworkName,Qty,TMS,Price,Cost,Remark,Ukey,AddName,AddDate,EditName,EditDate)
			values(s.ID,s.ArtworkTypeID,s.Article,s.PatternCode,s.PatternDesc,s.ArtworkID,s.ArtworkName,s.Qty,s.TMS,s.Price,s.Cost,s.Remark,s.Ukey,s.AddName,s.AddDate,s.EditName,s.EditDate)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then 
			delete;


		---------Order_EachCons--------------------Each Cons
		Merge Production.dbo.Order_EachCons as t
		Using (select a.* from Trade_To_Pms.dbo.Order_EachCons a inner join #TOrder b on a.id=b.id) as s
		on t.ukey=s.ukey	
		when matched then 
			update set 
			t.Id=					s.Id,
			t.Seq=					s.Seq,
			t.MarkerName=			s.MarkerName,
			t.FabricCombo=			s.FabricCombo,
			t.MarkerLength=		replace(s.MarkerLength,'Ｙ','Y'),
			t.LectraCode=			s.LectraCode,
			t.ConsPC= s.ConsPC,
			t.CuttingPiece= s.CuttingPiece,
			t.ActCuttingPerimeter=	replace(s.ActCuttingPerimeter,'Yd','Y'),
			t.StraightLength=	replace(s.StraightLength,'Yd','Y'),
			t.FabricCode= s.FabricCode,
			t.CurvedLength=		replace(s.CurvedLength,'Yd','Y'),
			t.Efficiency= s.Efficiency,
			t.Article= s.Article,
			t.Remark= s.Remark,
			t.MixedSizeMarker= s.MixedSizeMarker,
			t.MarkerNo= s.MarkerNo,
			t.MarkerUpdate= s.MarkerUpdate,
			t.MarkerUpdateName= s.MarkerUpdateName,
			t.AllSize= s.AllSize,
			t.PhaseID= s.PhaseID,
			t.SMNoticeID= s.SMNoticeID,
			t.MarkerVersion= s.MarkerVersion,
			t.Direction= s.Direction,
			t.CuttingWidth= s.CuttingWidth,
			t.Width= s.Width,
			t.TYPE= s.TYPE,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate,
			t.isQT= s.isQT,
			t.MarkerDownloadID= s.MarkerDownloadID,
			t.OrderCUkey_Old= s.OrderCUkey_Old
		when not matched by target then 
			insert(Id,Ukey,Seq,MarkerName,FabricCombo,MarkerLength,LectraCode,ConsPC,CuttingPiece,ActCuttingPerimeter,StraightLength,FabricCode,CurvedLength,Efficiency,Article,Remark,MixedSizeMarker,MarkerNo,MarkerUpdate,MarkerUpdateName,AllSize,PhaseID,SMNoticeID,MarkerVersion,Direction,CuttingWidth,Width,TYPE,AddName,AddDate,EditName,EditDate,isQT,MarkerDownloadID,OrderCUkey_Old)
			values(s.Id,s.Ukey,s.Seq,s.MarkerName,s.FabricCombo,s.MarkerLength,s.LectraCode,s.ConsPC,s.CuttingPiece,s.ActCuttingPerimeter,s.StraightLength,s.FabricCode,s.CurvedLength,s.Efficiency,s.Article,s.Remark,s.MixedSizeMarker,s.MarkerNo,s.MarkerUpdate,s.MarkerUpdateName,s.AllSize,s.PhaseID,s.SMNoticeID,s.MarkerVersion,s.Direction,s.CuttingWidth,s.Width,s.TYPE,s.AddName,s.AddDate,s.EditName,s.EditDate,s.isQT,s.MarkerDownloadID,s.OrderCUkey_Old)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then  
			delete;

		--------Order_EachCons_SizeQty----------------Each cons - Size & Qty
		Merge Production.dbo.Order_EachCons_SizeQty as t
		Using (select a.* from Trade_To_Pms.dbo.Order_EachCons_SizeQty a inner join #TOrder b on a.id=b.id) as s
		on t.Order_EachConsUkey=s.Order_EachConsUkey and t.sizecode=s.sizecode	
		when matched then 
			update set 
			t.Id= s.Id,
			t.SizeCode= s.SizeCode,
			t.Qty= s.Qty
		when not matched by target then 
			insert(Order_EachConsUkey,Id,SizeCode,Qty)
			values(s.Order_EachConsUkey,s.Id,s.SizeCode,s.Qty)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then  
			delete;

		-------Order_EachCons_Color--------------------Each cons - 用量展開
		Merge Production.dbo.Order_EachCons_Color as t
		Using (select a.* from Trade_To_Pms.dbo.Order_EachCons_Color a inner join #TOrder b on a.id=b.id) as s
		on t.Ukey=s.Ukey	
		when matched then 
			update set 
			t.Id= s.Id,
			t.Order_EachConsUkey= s.Order_EachConsUkey,
			t.Ukey= s.Ukey,
			t.ColorID= s.ColorID,
			t.CutQty= s.CutQty,
			t.Layer= s.Layer,
			t.Orderqty= s.Orderqty,
			t.SizeList= s.SizeList,
			t.Variance= s.Variance,
			t.YDS= s.YDS
		when not matched by target then 
			insert(Id,Order_EachConsUkey,Ukey,ColorID,CutQty,Layer,Orderqty,SizeList,Variance,YDS)
			values(s.Id,s.Order_EachConsUkey,s.Ukey,s.ColorID,s.CutQty,s.Layer,s.Orderqty,s.SizeList,s.Variance,s.YDS)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then  
			delete;
		
		---------Order_EachCons_Color_Article-------Each cons - 用量展開明細
		Merge Production.dbo.Order_EachCons_Color_Article as t
		Using (select a.* from Trade_To_Pms.dbo.Order_EachCons_Color_Article a inner join #TOrder b on a.id=b.id) as s
		on t.Ukey=s.Ukey	
		when matched then 
			update set 
			t.Id= s.Id,
			t.Order_EachCons_ColorUkey= s.Order_EachCons_ColorUkey,
			t.Article= s.Article,
			t.ColorID= s.ColorID,
			t.SizeCode= s.SizeCode,
			t.Orderqty= s.Orderqty,
			t.Layer= s.Layer,
			t.CutQty= s.CutQty,
			t.Variance= s.Variance
		when not matched by target then 
			insert(Id,Order_EachCons_ColorUkey,Article,ColorID,SizeCode,Orderqty,Layer,CutQty,Variance,Ukey)
			values(s.Id,s.Order_EachCons_ColorUkey,s.Article,s.ColorID,s.SizeCode,s.Orderqty,s.Layer,s.CutQty,s.Variance,s.Ukey)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then  
			delete;
		
		------------Order_Article----------------------Art
		Merge Production.dbo.Order_Article as t
		Using (select a.* from Trade_To_Pms.dbo.Order_Article a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.article=s.article
		when matched then 
			update set 
			t.Seq= s.Seq,
			t.TissuePaper= s.TissuePaper
		when not matched by target then
			insert(id,Seq,Article,TissuePaper)
			values(s.id,s.Seq,s.Article,s.TissuePaper)
		when not matched by source AND T.ID IN (SELECT ID FROM #Torder) then  
			delete;

		-----------Order_BOA_KeyWord---------------------Bill of Other - Key word

		Merge Production.dbo.Order_BOA_KeyWord as t
		Using (select a.* from Trade_To_Pms.dbo.Order_BOA_KeyWord a inner join #TOrder b on a.id=b.id) as s
		on t.ukey=s.ukey
		when matched then 
			update set 
			t.Order_BOAUkey= s.Order_BOAUkey,
			t.Prefix= s.Prefix,
			t.KeyWordID= s.KeyWordID,
			t.Postfix= s.Postfix,
			t.Code= s.Code,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate
		when not matched by target then
			insert(ID,Ukey,Order_BOAUkey,Prefix,KeyWordID,Postfix,Code,AddName,AddDate,EditName,EditDate)
			values(s.ID,s.Ukey,s.Order_BOAUkey,s.Prefix,s.KeyWordID,s.Postfix,s.Code,s.AddName,s.AddDate,s.EditName,s.EditDate)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;
	

		------------Order_BOA_CustCD----------Bill of Other - 用量展開
		Merge Production.dbo.Order_BOA_CustCD as t
		Using (select a.* from Trade_To_Pms.dbo.Order_BOA_CustCD a inner join #TOrder b on a.id=b.id) as s
		on t.Order_BOAUkey=s.Order_BOAUkey and t.custcdid=s.custcdid and t.refno=s.refno
		when matched then 
			update set 
			t.CustCDID= s.CustCDID,
			t.Refno= s.Refno,
			t.SCIRefno= s.SCIRefno,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate
		when not matched by target then
			insert(Id,Order_BOAUkey,CustCDID,Refno,SCIRefno,AddName,AddDate,EditName,EditDate)
			values(s.Id,s.Order_BOAUkey,s.CustCDID,s.Refno,s.SCIRefno,s.AddName,s.AddDate,s.EditName,s.EditDate)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;

		-----------------Order_PFHis-----------Pull forward歷史記錄
		Merge Production.dbo.Order_PFHis as t
		Using (select a.* from Trade_To_Pms.dbo.Order_PFHis a inner join #TOrder b on a.id=b.id) as s
		on t.Ukey=s.Ukey
		when matched then 
			update set 
			t.NewSciDelivery= s.NewSciDelivery,
			t.OldSciDelivery= s.OldSciDelivery,
			t.LETA= s.LETA,
			t.Remark= s.Remark,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate
		when not matched by target then
			insert(Id,NewSciDelivery,OldSciDelivery,LETA,Remark,AddName,AddDate,Ukey)
			values(s.Id,s.NewSciDelivery,s.OldSciDelivery,s.LETA,s.Remark,s.AddName,s.AddDate,s.Ukey)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;
		----------------Order_QtyCTN------------Qty breakdown per Carton
		Merge Production.dbo.Order_QtyCTN as t
		Using (select a.* from Trade_To_Pms.dbo.Order_QtyCTN a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id
		when matched then 
			update set 
			t.Article= s.Article,
			t.SizeCode= s.SizeCode,
			t.Qty= s.Qty,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate
		when not matched by target then
			insert(Id,Article,SizeCode,Qty,AddName,AddDate,EditName,EditDate)
			values(s.Id,s.Article,s.SizeCode,s.Qty,s.AddName,s.AddDate,s.EditName,s.EditDate)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;

		--------------------MNOder-------------------------M/NOtice
		Merge Production.dbo.MNOrder as t
		Using (select a.* from Trade_To_Pms.dbo.MNOrder a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id
		when matched then 
			update set 
			t.BrandID= s.BrandID,
			t.ProgramID= s.ProgramID,
			t.StyleID= s.StyleID,
			t.SeasonID= s.SeasonID,
			t.Qty= s.Qty,
			t.OrderUnit= s.OrderUnit,
			t.FactoryID= s.FactoryID,
			t.CTNQty= s.CTNQty,
			t.CustCDID= s.CustCDID,
			t.CustPONO= s.CustPONO,
			t.Customize1= s.Customize1,
			t.BuyerDelivery= s.BuyerDelivery,
			t.MRHandle= s.MRHandle,
			t.SMR= s.SMR,
			t.PACKING= s.PACKING,
			t.Packing2= s.Packing2,
			t.MarkBack= s.MarkBack,
			t.MarkFront= s.MarkFront,
			t.MarkLeft= s.MarkLeft,
			t.MarkRight= s.MarkRight,
			t.Label= s.Label,
			t.SizeRange= s.SizeRange,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate
		when not matched by target then
			insert(ID
,BrandID
,ProgramID
,StyleID
,SeasonID
,Qty
,OrderUnit
,FactoryID
,CTNQty
,CustCDID
,CustPONO
,Customize1
,BuyerDelivery
,MRHandle
,SMR
,PACKING
,Packing2
,MarkBack
,MarkFront
,MarkLeft
,MarkRight
,Label
,SizeRange
,AddName
,AddDate
)
			values(s.ID,
s.BrandID,
s.ProgramID,
s.StyleID,
s.SeasonID,
s.Qty,
s.OrderUnit,
s.FactoryID,
s.CTNQty,
s.CustCDID,
s.CustPONO,
s.Customize1,
s.BuyerDelivery,
s.MRHandle,
s.SMR,
s.PACKING,
s.Packing2,
s.MarkBack,
s.MarkFront,
s.MarkLeft,
s.MarkRight,
s.Label,
s.SizeRange,
s.AddName,
s.AddDate
);
		
		----------------MNOrder_Qty---------------------------M/NOtice Qty breakdown
		Merge Production.dbo.MNOrder_Qty as t
		Using (select a.* from Trade_To_Pms.dbo.MNOrder_Qty a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.article=s.article and t.sizecode=s.sizecode
		when matched then 
			update set 
			t.Article= s.Article,
			t.SizeCode= s.SizeCode,
			t.Qty= s.Qty,
			t.AddName= s.AddName,
			t.AddDate= s.AddDate,
			t.EditName= s.EditName,
			t.EditDate= s.EditDate
		when not matched by target then
			insert(ID,Article,SizeCode,Qty,AddName,AddDate,EditName,EditDate)
			values(s.ID,s.Article,s.SizeCode,s.Qty,s.AddName,s.AddDate,s.EditName,s.EditDate)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;

		--------------MNOrder_Color---------------------M/NOtice 單-Color Description
		Merge Production.dbo.MNOrder_Color as t
		Using (select a.* from Trade_To_Pms.dbo.MNOrder_Color a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.colorid=s.colorid 
		when matched then 
			update set 
			t.ColorName= s.ColorName,
			t.Seqno= s.Seqno,
			t.ColorMultiple= s.ColorMultiple,
			t.ColorMultipleName= s.ColorMultipleName
		when not matched by target then
			insert(ID,ColorID,ColorName,Seqno,ColorMultiple,ColorMultipleName)
			values(s.ID,s.ColorID,s.ColorName,s.Seqno,s.ColorMultiple,s.ColorMultipleName)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;

		--------------MNOrder_SizeCode-----------------M/NOtice-尺寸表 Size Spec(存尺寸碼)
		Merge Production.dbo.MNOrder_SizeCode as t
		Using (select a.* from Trade_To_Pms.dbo.MNOrder_SizeCode a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.SizeCode=s.SizeCode 
		when matched then 
			update set 
			t.Seq= s.Seq,
			t.SizeGroup= s.SizeGroup
		when not matched by target then
			insert(Id,Seq,SizeGroup,SizeCode)
			values(s.Id,s.Seq,s.SizeGroup,s.SizeCode)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;

		--------------MNOrder_SizeItem-----------------M/NOtice-尺寸表 Size Spec(存量法資料)
		Merge Production.dbo.MNOrder_SizeItem as t
		Using (select a.* from Trade_To_Pms.dbo.MNOrder_SizeItem a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.SizeItem=s.SizeItem 
		when matched then 
			update set 
			t.SizeDesc= s.SizeDesc,
			t.SizeUnit= s.SizeUnit
		when not matched by target then
			insert(ID,SizeItem,SizeDesc,SizeUnit)
			values(s.ID,s.SizeItem,s.SizeDesc,s.SizeUnit)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;


		--------------MNOrder_SizeSpec-----------------M/NOtice-尺寸表 Size Spec(存尺寸碼)
		Merge Production.dbo.MNOrder_SizeSpec as t
		Using (select a.* from Trade_To_Pms.dbo.MNOrder_SizeSpec a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.SizeItem=s.SizeItem and t.SizeCode=s.SizeCode
		when matched then 
			update set 
			t.Seq= s.Seq,
			t.SizeSpec= s.SizeSpec
		when not matched by target then
			insert(ID,SizeItem,Seq,SizeCode,SizeSpec)
			values(s.ID,s.SizeItem,s.Seq,s.SizeCode,s.SizeSpec)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;

		--------------MNOrder_ColorCombo-----------------M/NOtice-Color Comb. (主料-配色表)

		Merge Production.dbo.MNOrder_ColorCombo as t
		Using (select a.* from Trade_To_Pms.dbo.MNOrder_ColorCombo a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.Article=s.Article and t.LectraCode=s.LectraCode
		when matched then 
			update set 
			t.ColorID= s.ColorID,
			t.FabricCode= s.FabricCode,
			t.PatternPanel= s.PatternPanel
		when not matched by target then
			insert(ID,Article,ColorID,FabricCode,PatternPanel,LectraCode)
			values(s.ID,s.Article,s.ColorID,s.FabricCode,s.PatternPanel,s.LectraCode)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;

		--------------MNOrder_FabricCode-----------------M/NOtice-配色表 Color Comb. (主料-部位vs布別vsQT)
		Merge Production.dbo.MNOrder_FabricCode as t
		Using (select a.* from Trade_To_Pms.dbo.MNOrder_FabricCode a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.LectraCode=s.LectraCode
		when matched then 
			update set 
			t.PatternPanel= s.PatternPanel,
			t.FabricCode= s.FabricCode,
			t.ForArticle= s.ForArticle
		when not matched by target then
			insert(ID,PatternPanel,FabricCode,LectraCode,ForArticle)
			values(s.ID,s.PatternPanel,s.FabricCode,s.LectraCode,s.ForArticle)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;

		--------------MNOrder_BOF-----------------M/NOtice-Fabric
		Merge Production.dbo.MNOrder_BOF as t
		Using (select a.* from Trade_To_Pms.dbo.MNOrder_BOF a inner join #TOrder b on a.id=b.id) as s
		on t.id=s.id and t.FabricCode=s.FabricCode
		when matched then 
			update set 
			t.Refno= s.Refno,
			t.SCIRefno= s.SCIRefno,
			t.SuppID= s.SuppID,
			t.Description= s.Description,
			t.FabricUkey_Old= s.FabricUkey_Old,
			t.FabricVer_OLd = s.FabricVer_OLd 
		when not matched by target then
			insert(ID,FabricCode,Refno,SCIRefno,SuppID,Description,FabricUkey_Old,FabricVer_OLd )
			values(s.ID,s.FabricCode,s.Refno,s.SCIRefno,s.SuppID,s.Description,s.FabricUkey_Old,s.FabricVer_OLd )
		when not matched by source and t.id in (select id from #TOrder) then
			delete;

			--------------MNOrder_BOA-----------------M/NOtice-Fabric
		Merge Production.dbo.MNOrder_BOA as t
		Using (select a.* from Trade_To_Pms.dbo.MNOrder_BOA a inner join #TOrder b on a.id=b.id) as s
		on t.ukey=s.ukey
		when matched then 
			update set 
			t.Refno= s.Refno,
			t.SCIRefno= s.SCIRefno,
			t.SuppID= s.SuppID,
			t.Seq= s.Seq,
			t.UsedQty= s.UsedQty,
			t.BomTypeSize= s.BomTypeSize,
			t.BomTypeColor= s.BomTypeColor,
			t.BomTypeStyle= s.BomTypeStyle,
			t.BomTypeArticle= s.BomTypeArticle,
			t.BomTypeCustCD= s.BomTypeCustCD,
			t.BomTypePono= s.BomTypePono,
			t.BomTypeBuyMonth= s.BomTypeBuyMonth,
			t.BomTypeCountry= s.BomTypeCountry,
			t.PatternPanel= s.PatternPanel,
			t.SizeItem= s.SizeItem,
			t.BomTypeZipper= s.BomTypeZipper,
			t.Remark= s.Remark,
			t.Description= s.Description,
			t.FabricVer_Old= s.FabricVer_Old,
			t.FabricUkey_Old= s.FabricUkey_Old
		when not matched by target then
			insert(Id
,UKey
,Refno
,SCIRefno
,SuppID
,Seq
,UsedQty
,BomTypeSize
,BomTypeColor
,BomTypeStyle
,BomTypeArticle
,BomTypeCustCD
,BomTypePono
,BomTypeBuyMonth
,BomTypeCountry
,PatternPanel
,SizeItem
,BomTypeZipper
,Remark
,Description
,FabricVer_Old
,FabricUkey_Old
 )
			values(s.Id,
s.UKey,
s.Refno,
s.SCIRefno,
s.SuppID,
s.Seq,
s.UsedQty,
s.BomTypeSize,
s.BomTypeColor,
s.BomTypeStyle,
s.BomTypeArticle,
s.BomTypeCustCD,
s.BomTypePono,
s.BomTypeBuyMonth,
s.BomTypeCountry,
s.PatternPanel,
s.SizeItem,
s.BomTypeZipper,
s.Remark,
s.Description,
s.FabricVer_Old,
s.FabricUkey_Old
)
		when not matched by source and t.id in (select id from #TOrder) then
			delete;

declare @Odate_s datetime = (SELECT DateStart FROM Trade_To_Pms.dbo.DateInfo WHERE NAME = 'ORDER')
declare @Odate_e datetime = (SELECT DateEnd FROM Trade_To_Pms.dbo.DateInfo WHERE NAME = 'ORDER')

select * into #tmpOrders 
from Production.dbo.Orders a
where (a.BuyerDelivery between @Odate_s and @Odate_e
or a.SciDelivery between @Odate_s and @Odate_e)
and a.LocalOrder = 0


	Merge  Production.dbo.OrderComparisonList as t
	Using (select a.*,b.styleid as AStyle from #tmpOrders a inner join #TOrder b on a.id=b.id
		where a.BuyerDelivery between @Odate_s and @Odate_e
		or a.SciDelivery between @Odate_s and @Odate_e
		and a.LocalOrder = 0) as s
	on t.orderid=s.id and t.factoryid=s.factoryid and t.updateDate = @dToDay
	when matched then
		update set
		t.TransferDate=@OldDate,
		t.OriginalQty =s.qty,
		t.OriginalBuyerDelivery= s.BuyerDelivery,
		t.DeleteOrder=1,
		t.OriginalStyleID = iif(s.AStyle is not null,s.AStyle,s.styleid),
		t.TransferToFactory = s.FactoryID
	when not matched by target then
			insert (orderid,UpdateDate,  factoryid,TransferDate,OriginalQty,OriginalBuyerDelivery,DeleteOrder)
			values (   s.id,   @dToDay,s.factoryid,    @OldDate      ,s.qty,        BuyerDelivery,     1);
		------------------Leo--------------------------------------

-------------------------------------Order_Article
Delete b
from Production.dbo.Order_Article b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_Artwork
Delete b
from Production.dbo.Order_Artwork b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_BOA_CustCD
Delete b
from Production.dbo.Order_BOA_CustCD b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_BOA_Expend
Delete b
from Production.dbo.Order_BOA_Expend b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_BOA_KeyWord
Delete b
from Production.dbo.Order_BOA_KeyWord b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_BOA_Shell
Delete b
from Production.dbo.Order_BOA_Shell b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_BOA
Delete b
from Production.dbo.Order_BOA b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_BOF_Expend
Delete b
from Production.dbo.Order_BOF_Expend b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_BOF_Shell
Delete b
from Production.dbo.Order_BOF_Shell b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_BOF
Delete b
from Production.dbo.Order_BOF b
where exists(select id from #tmpOrders as a where a.id = b.id)

-------------------------------------Order_ColorCombo
Delete b
from Production.dbo.Order_ColorCombo b
where exists(select id from #tmpOrders as a where a.id = b.id)

-------------------------------------Order_CTNData
Delete b
from Production.dbo.Order_CTNData b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_EachCons_Article
Delete b
from Production.dbo.Order_EachCons_Article b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_EachCons_Color
Delete b
from Production.dbo.Order_EachCons_Color b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_EachCons_Color_Article
Delete b
from Production.dbo.Order_EachCons_Color_Article b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_EachCons_PatternPanel
Delete b
from Production.dbo.Order_EachCons_PatternPanel b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_EachCons_SizeQty
Delete b
from Production.dbo.Order_EachCons_SizeQty b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_EachCons
Delete b
from Production.dbo.Order_EachCons b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_FabricCode_Article
Delete b
from Production.dbo.Order_FabricCode_Article b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_FabricCode_QT
Delete b
from Production.dbo.Order_FabricCode_QT b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_FabricCode
Delete b
from Production.dbo.Order_FabricCode b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_History
Delete b
from Production.dbo.Order_History b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_MarkerList_Article
Delete b
from Production.dbo.Order_MarkerList_Article b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_MarkerList_PatternPanel
Delete b
from Production.dbo.Order_MarkerList_PatternPanel b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_MarkerList_SizeQty
Delete b
from Production.dbo.Order_MarkerList_SizeQty b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_MarkerList
Delete b
from Production.dbo.Order_MarkerList b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_PFHis
Delete b
from Production.dbo.Order_PFHis b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_Qty
Delete b
from Production.dbo.Order_Qty b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_QtyCTN
Delete b
from Production.dbo.Order_QtyCTN b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_QtyShip
Delete b
from Production.dbo.Order_QtyShip b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_QtyShip_Detail
Delete b
from Production.dbo.Order_QtyShip_Detail b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_SizeCode
Delete b
from Production.dbo.Order_SizeCode b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_SizeItem
Delete b
from Production.dbo.Order_SizeItem b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_SizeSpec
Delete b
from Production.dbo.Order_SizeSpec b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_Surcharge
Delete b
from Production.dbo.Order_Surcharge b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_TmsCost
Delete b
from Production.dbo.Order_TmsCost b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------Order_UnitPrice
Delete b
from Production.dbo.Order_UnitPrice b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------MNOrder
Delete b
from Production.dbo.MNOrder b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------MNOrder_BOA
Delete b
from Production.dbo.MNOrder_BOA b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------MNOrder_BOF
Delete b
from Production.dbo.MNOrder_BOF b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------MNOrder_Color
Delete b
from Production.dbo.MNOrder_Color b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------MNOrder_ColorCombo
Delete b
from Production.dbo.MNOrder_ColorCombo b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------MNOrder_FabricCode
Delete b
from Production.dbo.MNOrder_FabricCode b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------MNOrder_Qty
Delete b
from Production.dbo.MNOrder_Qty b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------MNOrder_SizeCode
Delete b
from Production.dbo.MNOrder_SizeCode b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------MNOrder_SizeItem
Delete b
from Production.dbo.MNOrder_SizeItem b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------MNOrder_SizeSpec
Delete b
from Production.dbo.MNOrder_SizeSpec b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------[dbo].[PO]
Delete b
from Production.dbo.PO b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------[dbo].[PO_Supp]
Delete b
from Production.dbo.PO_Supp b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------[dbo].[PO_Supp_Detail]
Delete b
from Production.dbo.PO_Supp_Detail b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------[dbo].[PO_Supp_Detail_OrderList]
Delete b
from Production.dbo.PO_Supp_Detail_OrderList b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------[dbo].[Cutting]
Delete b
from Production.dbo.Cutting b
where exists(select id from #tmpOrders as a where a.id = b.id)
-------------------------------------CuttingTape[dbo].[CuttingTape]
Delete b
from Production.dbo.CuttingTape b
where exists(select id from #tmpOrders as a where a.id = b.POID)
-------------------------------------[dbo].[CuttingTape_Detail]
Delete b
from Production.dbo.CuttingTape_Detail b
where exists(select id from #tmpOrders as a where a.id = b.POID)
-----------------------------------------------------------------------------------------------------------

Merge Production.dbo.OrderComparisonList as t
Using Production.dbo.Factory as s
on t.factoryid=s.id and UpdateDate =@dToDay
when not matched by Target then 
insert(OrderId,    UpdateDate,  TransferDate,FactoryID)
values('No Change!',@dToDay,    @OldDate,    s.ID);
-----------------------------------------------------------------------------------------------------------
drop table #tmpOrders
drop table #TOrder
----------------------刪除表頭多的資料order 最後刪除
Delete Production.dbo.Orders
from Production.dbo.Orders as a left join Trade_To_Pms.dbo.Orders as b
on a.id = b.id
where b.id is null
AND a.BuyerDelivery = (SELECT DateStart FROM Trade_To_Pms.dbo.DateInfo WHERE NAME = 'ORDER')
AND a.SciDelivery = (SELECT DateEnd FROM Trade_To_Pms.dbo.DateInfo WHERE NAME = 'ORDER')
AND a.LocalOrder = 0

END
------------------------------------------------------------------------------------------------------------------------
	

System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.542][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

If Object_Id ( 'dbo.imp_part') Is Not Null
    Drop Procedure dbo.imp_part;

System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.549][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

-- =============================================
-- Author:		<Willy S01910>
-- Create date: <2016/08/22>
-- Description:	<import part>
-- =============================================
CREATE PROCEDURE [dbo].[imp_part]
AS
BEGIN
	

	----------Machine Parts---------------------
	Merge Machine.dbo.Part as t
	Using Trade_To_Pms.dbo.Part as s
	on t.id=s.Refno
	when matched then 
		update set 
		t.MachineGroupID=s.MachineGroupID,
		t.MachineBrandID=s.MachineBrandID,	
		t.Formula=s.Formula,
		t.Fix=s.Fix,
		t.AddName=s.AddName,
		t.AddDate=s.AddDate
	when not matched by target then 
		insert ( ID 
      , MachineGroupID 
      , MachineBrandID 
      , Price 
      , CurrencyID 
      , Formula 
      , Fix 
      , AddName 
      , AddDate 
      , EditName 
      , EditDate 
	)values(s.Refno 
      , s.MachineGroupID 
      , s.MachineBrandID 
      , s.Price 
      , s.CurrencyID 
      , s.Formula 
      , s.Fix 
      , s.AddName 
      , s.AddDate 
      , s.EditName 
      , s.EditDate );
	
	
	-----------------PartQuot-----------------------------

	Merge [Machine].[dbo].[PartQuot] as t
	Using (select  a.* from [Trade_To_Pms].[dbo].[MmsQuot] a  inner join  [Trade_To_Pms].[dbo].Part b
	on a.refno=b.refno )	 as s
	on t.id=s.refno and t.purchaseFrom='T' and t.PartBrandID=s.MMSBrandID and t.suppid=s.suppid
	when matched and t.purchaseFrom='T'  then
		update set 
		t.purchaseFrom='T',
		t.suppid=s.suppid,
		t.CurrencyID=s.CurrencyID,
		t.Price=s.Price,
		t.AddName=s.AddName,
		t.AddDate=s.AddDate,
		t.EditName=s.EditName,
		t.EditDate=s.EditDate		
	when not matched by target then
	insert (id,
		purchaseFrom,
		suppid,
		CurrencyID,
		Price,
		AddName,
		AddDate,
		EditName,
		EditDate
				)
		values(s.Refno,
		'T',
		s.suppid,
		s.CurrencyID,
		s.Price,
		s.AddName,
		s.AddDate,
		s.EditName,
		s.EditDate		
		)
	when not matched by source and t.purchaseFrom='T' and t.id in (select refno from [Trade_To_Pms].[dbo].Part)  then
		delete;

---------------PartBrand-------------------------------
	Merge Machine.dbo.PartBrand as t
	Using (select * from [Trade_To_Pms].[dbo].[MmsBrand] where type='P') as s
	on t.id=s.id
	when matched then 
		update set
		t.Name= 	      s.Name 
		,t.Junk= 	      s.Junk 
		,t.AddName= 	      s.AddName 
		,t.AddDate= 	      s.AddDate 
		,t.EditName= 	      s.EditName 
		,t.EditDate= 	      s.EditDate 
	when not matched by target then 
		insert(
		ID
		,Name 
		,Junk 
		,AddName 
		,AddDate 
		,EditName 
		,EditDate
		)
		values
		(
		s.ID
		,s.Name 
		,s.Junk 
		,s.AddName 
		,s.AddDate 
		,s.EditName 
		,s.EditDate
		)
	when not matched by source then
	delete;

	----------------PartPO2-------------------------

	update [Machine_Test].[dbo].[PartPO_Detail]
	set Junk = b.Cancel 
	from [Machine_Test].[dbo].[PartPO_Detail] a
	inner join [Trade_To_Pms].[dbo].[MmsReq_Detail] b on a.id=b.ID and a.SEQ2=b.Seq2


	----------------��z�Ҧ��u�t--------------------
	declare @Sayfty table(id varchar(10)) --�u�t�N�X
	insert @Sayfty select id from Production.dbo.Factory

	-- if type<>'M'
	UPDATE Machine.DBO.PartPO_Detail
	SET TPEPOID = B.id,SEQ1=b.Seq1
	FROM Machine.DBO.PartPO_Detail A
	INNER JOIN Trade_To_Pms.DBO.MmsPO_Detail B  on a.id=b.Refno and a.SEQ2=b.Seq2
	INNER JOIN  Trade_To_Pms.DBO.MmsPO C ON B.ID=C.ID
	WHERE C.Type <>'M'
	and C.FactoryID in (select id from @Sayfty)

	-- ------------MachinePO--------------------
	declare @T table (id varchar(13))

	Merge Machine.dbo.MachinePO as t
	Using (select * from Trade_To_Pms.DBO.MmsPO where factoryid in (select id from @Sayfty) and type = 'M')  as s
	on t.id=s.id
	when matched  then
		update set
		t.CDate = s.CDate ,
		t.PurchaseFrom = 'T' ,		
		t.FactoryID = s.FactoryID ,
		t.CurrencyID = s.CurrencyID ,
		t.Handle = s.Handle ,
		t.LocalSuppID = s.SuppID ,
		t.Amount = s.Amount ,
		t.Vatrate = s.Vatrate ,
		t.Vat = s.Vat ,
		t.Remark = s.Remark ,
		t.Approve = s.ApvName ,		
		t.ApproveDate = s.ApvDate ,
		t.AddName = s.AddName ,
		t.AddDate = s.AddDate ,
		t.EditName = s.EditName ,
		t.EditDate = s.EditDate 
	when not matched by target then
		insert
		(
			 ID ,
        CDate ,
        PurchaseFrom ,
        FactoryID ,
        CurrencyID ,
        Handle ,
        LocalSuppID ,
        Amount ,
        Vatrate ,
        Vat ,
        Remark ,
        Approve ,
        ApproveDate ,
        AddName ,
        AddDate ,
        EditName ,
        EditDate 
		)
		values(s. ID ,
		s.CDate ,
		'T' ,
		s.FactoryID ,
		s.CurrencyID ,
		s.Handle ,
		s.SuppID ,
		s.Amount ,
		s.Vatrate ,
		s.Vat ,
		s.Remark ,
		s.ApvName ,
		s.ApvDate ,
		s.AddName ,
		s.AddDate ,
		s.EditName ,
		s.EditDate 
)
output inserted.id into @T;

------------------MachinePO_Detail----------------------

	Merge Machine.[dbo].[MachinePO_Detail] as t
	using (select * from  Trade_To_Pms.[dbo].[MmsPO_Detail] where id in (select id from @T)) as s
	on t.id=s.id and t.seq1=s.seq1 and t.seq2=s.seq2
	when matched then 
				update set
				t.Qty= s.Qty,
				t.FOC= s.FOC,
				t.Price= s.Price,
				t.Remark= s.Remark,
				t.Junk= s.Junk

		when not matched by target then
		insert  (ID,Seq1,Seq2,Qty,FOC,Price,Remark,Junk)
		values	(s.ID,s.Seq1,s.Seq2,s.Qty,s.FOC,s.Price,s.Remark,s.Junk	)
		when not matched by source and t.id in (select id from @T) then
		delete ;
		
	--------------Partunit-------------------------------
		Merge [Machine_Test].[dbo].[MMSUnit] as t
	using [Trade_To_Pms].[dbo].[MmsUnit] as s
	on t.id=s.id
		when matched then 
		update set
		t.addname=s.addname,
		t.adddate=s.adddate,
		t.editname=s.editname,
		t.editdate=s.editdate
		when not matched by target then
		insert([ID]
      ,[AddName]
      ,[AddDate]
      ,[EditName]
      ,[EditDate])
	  values
	  (
	   s.[ID]     
      ,s.[AddName]
      ,s.[AddDate]
      ,s.[EditName]
      ,s.[EditDate]
	  );
	---------------MachBrand-----------------------------------

	Merge [Machine_Test].[dbo].[MachineBrand] as t
	Using (select * from [Trade_To_Pms].[dbo].[MmsBrand] where type='M') as s
	on t.id=s.id
	when matched then
			update set
		  t.Name= 	      s.Name   
		  ,t.Junk= 	      s.Junk   
		  ,t.AddName= 	      s.AddName   
		  ,t.AddDate= 	      s.AddDate   
		  ,t.EditName= 	      s.EditName   
		  ,t.EditDate= 	      s.EditDate   
	when not matched by target then
		insert (ID
		  ,Name 
		  ,Junk 
		  ,AddName 
		  ,AddDate 
		  ,EditName 
		  ,EditDate 
		)
		values(
		  s.ID   ,
		  s.Name  , 
		  s.Junk   ,
		  s.AddName ,  
		  s.AddDate  , 
		  s.EditName  , 
		  s.EditDate   
		);
	--------------MiscBrand--------------------------------------
	-- O: Miscellaneous         
	Merge [Machine_Test].[dbo].[MiscBrand] as t
	Using (select * from [Trade_To_Pms].[dbo].[MmsBrand] where type='O') as s
	on t.id=s.id
	when matched then
			update set
		  t.Name= 	      s.Name   
		  ,t.Junk= 	      s.Junk   
		  ,t.AddName= 	      s.AddName   
		  ,t.AddDate= 	      s.AddDate   
		  ,t.EditName= 	      s.EditName   
		  ,t.EditDate= 	      s.EditDate   
	when not matched  by target then
		insert (ID
		  ,Name 
		  ,Junk
		  ,AddName 
		  ,AddDate 
		  ,EditName 
		  ,EditDate 
		)
		values(
		  s.id  ,
		  s.Name  , 
		  s.Junk   ,
		  s.AddName ,  
		  s.AddDate  , 
		  s.EditName  , 
		  s.EditDate   
		)
	when not matched by source  then 
	delete;

END





System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.555][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

If Object_Id ( 'dbo.imp_Pattern') Is Not Null
    Drop Procedure dbo.imp_Pattern;

System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.562][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

-- =============================================
-- Author:		LEO
-- Create date: 20160903
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE imp_Pattern
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
--Imp_pattern
--���YPattern

---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.ID	      =b.ID
      ,a.Version	      =b.Version
      ,a.BrandID	      =b.BrandID
      ,a.ActFtyPattern	      =b.ActFtyPattern
      ,a.PatternNO	      =b.PatternNO
      ,a.RevisedReason	      =b.RevisedReason
      ,a.PatternName	      =b.PatternName
      ,a.EstFinDate	      =b.EstFinDate
      ,a.ActFinDate	      =b.ActFinDate
      ,a.CheckerName	      =b.CheckerName
      ,a.CheckerDate	      =b.CheckerDate
      ,a.Status	      =b.Status
      ,a.CFMName	      =b.CFMName
      ,a.UKey	      =b.UKey
      ,a.StyleRemark	      =b.StyleRemark
      ,a.HisRemark	      =b.HisRemark
      ,a.PendingRemark	      =b.PendingRemark
      ,a.SizeRound	      =b.SizeRound
      ,a.SizeRange	      =b.SizeRange
      ,a.StyleUkey	      =b.StyleUkey
      ,a.AddName	      =b.AddName
      ,a.AddDate	      =b.AddDate
      ,a.EditName	      =b.EditName
      ,a.EditDate	      =b.EditDate
from Production.dbo.Pattern as a inner join Trade_To_Pms.dbo.Pattern as b ON a.id=b.id and a.Version=b.Version
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Pattern(
ID
      ,Version
      ,BrandID
      ,ActFtyPattern
      ,PatternNO
      ,RevisedReason
      ,PatternName
      ,EstFinDate
      ,ActFinDate
      ,CheckerName
      ,CheckerDate
      ,Status
      ,CFMName
      ,UKey
      ,StyleRemark
      ,HisRemark
      ,PendingRemark
      ,SizeRound
      ,SizeRange
      ,StyleUkey
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate

)
select 
ID
      ,Version
      ,BrandID
      ,ActFtyPattern
      ,PatternNO
      ,RevisedReason
      ,PatternName
      ,EstFinDate
      ,ActFinDate
      ,CheckerName
      ,CheckerDate
      ,Status
      ,CFMName
      ,UKey
      ,StyleRemark
      ,HisRemark
      ,PendingRemark
      ,SizeRound
      ,SizeRange
      ,StyleUkey
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate

from Trade_To_Pms.dbo.Pattern as b
where not exists(select id from Production.dbo.Pattern as a where a.id = b.id and a.Version=b.Version)

--���
--Pattern_GL

----------------------�R���DTABLE�h�����
Delete Production.dbo.Pattern_GL
from Production.dbo.Pattern_GL as a inner join Trade_To_Pms.dbo.Pattern as c on a.ID=c.ID and a.Version=c.Version
left join Trade_To_Pms.dbo.Pattern_GL as b on a.id = b.id and a.Version=b.Version and a.SEQ=b.SEQ
where b.id is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.ID	       =b.ID
      ,a.Version	      =b.Version
      ,a.PatternUKEY	      =b.PatternUKEY
      ,a.SEQ	      =b.SEQ
      ,a.PatternCode	      =b.PatternCode
      ,a.PatternDesc	      =b.PatternDesc
      ,a.Annotation	      =b.Annotation
      ,a.Alone	      =b.Alone
      ,a.PAIR	      =b.PAIR
      ,a.DV	      =b.DV
      ,a.Remarks	      =b.Remarks

from Production.dbo.Pattern_GL as a 
inner join Trade_To_Pms.dbo.Pattern as c on a.ID=c.ID and a.Version=c.Version
inner join Trade_To_Pms.dbo.Pattern_GL as b ON a.id=b.id and a.Version=b.Version and a.SEQ=b.SEQ
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Pattern_GL(
       ID
      ,Version
      ,PatternUKEY
      ,SEQ
      ,PatternCode
      ,PatternDesc
      ,Annotation
      ,Alone
      ,PAIR
      ,DV
      ,Remarks

)
select 
       b.ID
      ,b.Version
      ,PatternUKEY
      ,SEQ
      ,PatternCode
      ,PatternDesc
      ,Annotation
      ,Alone
      ,PAIR
      ,DV
      ,Remarks

from Trade_To_Pms.dbo.Pattern_GL as b inner join Trade_To_Pms.dbo.Pattern as c on b.ID=c.ID and b.Version=c.Version
where not exists(select id from Production.dbo.Pattern_GL as a where a.id = b.id and a.Version=b.Version and a.SEQ=b.SEQ)

--���Pattern_GL_LectraCode


 ----------------------�R���DTABLE�h�����
Delete Production.dbo.Pattern_GL_LectraCode
from Production.dbo.Pattern_GL_LectraCode as a 
inner join Trade_To_Pms.dbo.Pattern as c on a.ID=c.ID and a.Version=c.Version
left join Trade_To_Pms.dbo.Pattern_GL_LectraCode as b on a.id = b.id and a.Version=b.Version and a.SEQ=b.SEQ and a.ArticleGroup=b.ArticleGroup
where b.id is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.ID	    =b.ID
      ,a.Version	      =b.Version
      ,a.PatternUKEY	      =b.PatternUKEY
      ,a.SEQ	      =b.SEQ
      ,a.PatternCode	      =b.PatternCode
      ,a.ArticleGroup	      =b.ArticleGroup
      ,a.LectraCode	      =b.LectraCode
      ,a.PatternPanel	      =b.PatternPanel
      ,a.FabricCode	      =b.FabricCode

from Production.dbo.Pattern_GL_LectraCode as a 
inner join Trade_To_Pms.dbo.Pattern as c on a.ID=c.ID and a.Version=c.Version
inner join Trade_To_Pms.dbo.Pattern_GL_LectraCode as b on a.id = b.id and a.Version=b.Version and a.SEQ=b.SEQ and a.ArticleGroup=b.ArticleGroup
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Pattern_GL_LectraCode(
ID
      ,Version
      ,PatternUKEY
      ,SEQ
      ,PatternCode
      ,ArticleGroup
      ,LectraCode
      ,PatternPanel
      ,FabricCode

)
select 
       b.ID
      ,b.Version
      ,PatternUKEY
      ,SEQ
      ,PatternCode
      ,ArticleGroup
      ,LectraCode
      ,PatternPanel
      ,FabricCode

from Trade_To_Pms.dbo.Pattern_GL_LectraCode as b inner join Trade_To_Pms.dbo.Pattern as c on b.ID=c.ID and b.Version=c.Version
where not exists(select id from Production.dbo.Pattern_GL_LectraCode as a where  a.id = b.id and a.Version=b.Version and a.SEQ=b.SEQ and a.ArticleGroup=b.ArticleGroup)


--���Pattern_GL_Article
----------------------�R���DTABLE�h�����
Delete Production.dbo.Pattern_GL_Article
from Production.dbo.Pattern_GL_Article as a
inner join Trade_To_Pms.dbo.Pattern as c on a.ID=c.ID and a.Version=c.Version
left join Trade_To_Pms.dbo.Pattern_GL_Article as b on a.id = b.id and a.SEQ=b.SEQ and a.Version=b.Version and a.ArticleGroup=b.ArticleGroup and a.Article=b.Article
where b.id is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.ID	    =b.ID		
      ,a.Seq	      =b.Seq		
      ,a.Version	      =b.Version		
      ,a.PatternUKEY	      =b.PatternUKEY		
      ,a.ArticleGroup	      =b.ArticleGroup		
      ,a.Article	      =b.Article		
      ,a.SizeRange	      =b.SizeRange		
      ,a.Remark	      =b.Remark		
      ,a.AddName	      =b.AddName		
      ,a.AddDate	      =b.AddDate		
      ,a.EditName	      =b.EditName		
      ,a.EditDate	      =b.EditDate		

from Production.dbo.Pattern_GL_Article as a 
inner join Trade_To_Pms.dbo.Pattern as c on a.ID=c.ID and a.Version=c.Version
inner join Trade_To_Pms.dbo.Pattern_GL_Article as b ON a.id = b.id and a.SEQ=b.SEQ and a.Version=b.Version and a.ArticleGroup=b.ArticleGroup and a.Article=b.Article
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Pattern_GL_Article(
ID
      ,Seq
      ,Version
      ,PatternUKEY
      ,ArticleGroup
      ,Article
      ,SizeRange
      ,Remark
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate

)
select 
       b.ID
      ,Seq
      ,b.Version
      ,PatternUKEY
      ,ArticleGroup
      ,Article
      ,b.SizeRange
      ,Remark
      ,b.AddName
      ,b.AddDate
      ,b.EditName
      ,b.EditDate

from Trade_To_Pms.dbo.Pattern_GL_Article as b
inner join Trade_To_Pms.dbo.Pattern as c on b.ID=c.ID and b.Version=c.Version
where not exists(select id from Production.dbo.Pattern_GL_Article as a where a.id = b.id and a.SEQ=b.SEQ and a.Version=b.Version and a.ArticleGroup=b.ArticleGroup and a.Article=b.Article)



END


System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.568][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

If Object_Id ( 'dbo.imp_Po') Is Not Null
    Drop Procedure dbo.imp_Po;

System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.577][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

-- =============================================
-- Author:		LEO
-- Create date:20160903
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE imp_Po
	---- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   SELECT b.*
INTO #Trade_To_Pms_PO --���U�����PO�����u�t�O
 FROM  Trade_To_Pms.dbo.PO b inner join Production.dbo.Factory c on b.FactoryID = c.ID

--PO1 PO
--PMS�h��
--,[FIRRemark]
--,[AIRemark]
--,[FIRLaboratoryRemark]
--,[AIRLaboratoryRemark]
--,[OvenLaboratoryRemark]
--,[ColorFastnessLaboratoryRemark]
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.ID	    =b.ID	
      ,a.StyleID	      =b.StyleID	
      ,a.SeasonId	      =b.SeasonId	
      ,a.StyleUkey	      =b.StyleUkey	
      ,a.BrandID	      =b.BrandID	
      ,a.POSMR	      =b.POSMR	
      ,a.POHandle	      =b.POHandle	
      ,a.PCHandle	      =b.PCHandle	
      ,a.PCSMR	      =b.PCSMR	
      ,a.McHandle	      =b.McHandle	
      ,a.ShipMark	      =b.ShipMark	
      ,a.FTYMark	      =b.FTYMark	
      ,a.Complete	      =b.Complete	
      ,a.PoRemark	      =b.PoRemark	
      ,a.CostRemark	      =b.CostRemark	
      ,a.IrregularRemark	      =b.IrregularRemark	
      ,a.FirstPoError	      =b.FirstPoError	
      ,a.FirstEditName	      =b.FirstEditName	
      ,a.FirstEditDate	      =b.FirstEditDate	
      ,a.FirstAddDate	      =b.FirstAddDate	
      ,a.FirstCostDate	      =b.FirstCostDate	
      ,a.LastPoError	      =b.LastPoError	
      ,a.LastEditName	      =b.LastEditName	
      ,a.LastEditDate	      =b.LastEditDate	
      ,a.LastAddDate	      =b.LastAddDate	
      ,a.LastCostDate	      =b.LastCostDate	
      ,a.AddName	      =b.AddName	
      ,a.AddDate	      =b.AddDate	
      ,a.EditName	      =b.EditName	
      ,a.EditDate	      =b.EditDate	
      ,a.MTLDelay	      =b.MtlDelay
from Production.dbo.PO as a inner join #Trade_To_Pms_PO as b ON a.id=b.id
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.PO(
       ID
      ,StyleID
      ,SeasonId
      ,StyleUkey
      ,BrandID
      ,POSMR
      ,POHandle
      ,PCHandle
      ,PCSMR
      ,McHandle
      ,ShipMark
      ,FTYMark
      ,Complete
      ,PoRemark
      ,CostRemark
      ,IrregularRemark
      ,FirstPoError
      ,FirstEditName
      ,FirstEditDate
      ,FirstAddDate
      ,FirstCostDate
      ,LastPoError
      ,LastEditName
      ,LastEditDate
      ,LastAddDate
      ,LastCostDate
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
      ,MTLDelay

)
select 
       ID
     , StyleID
      ,SeasonId
      ,StyleUkey
      ,BrandID
      ,POSMR
      ,POHandle
      ,PCHandle
      ,PCSMR
      ,McHandle
      ,ShipMark
      ,FTYMark
      ,Complete
      ,PoRemark
      ,CostRemark
      ,IrregularRemark
      ,FirstPoError
      ,FirstEditName
      ,FirstEditDate
      ,FirstAddDate
      ,FirstCostDate
      ,LastPoError
      ,LastEditName
      ,LastEditDate
      ,LastAddDate
      ,LastCostDate
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
      ,MTLDelay

from #Trade_To_Pms_PO as b
where not exists(
select id from Production.dbo.PO as a where a.id = b.id )

--PO2

------------------------------------------------------------------PO2 START
----------------------�R���DTABLE�h�����
Delete Production.dbo.PO_Supp
from Production.dbo.PO_Supp as a left join Trade_To_Pms.dbo.PO_Supp as b 
on a.id = b.id and a.SEQ1=b.SEQ1
where b.id is null
and  a.id in (select id from #Trade_To_Pms_PO)
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.ID	          =b.ID	
      ,a.SEQ1	      =b.SEQ1	
      ,a.SuppID	      =b.SuppID	
      ,a.Remark	      =b.Remark	
      ,a.Description	      =b.Description	
      ,a.AddName	      =b.AddName	
      ,a.AddDate	      =b.AddDate	
      ,a.EditName	      =b.EditName	
      ,a.EditDate	      =b.EditDate	

from Production.dbo.PO_Supp as a inner join Trade_To_Pms.dbo.PO_Supp as b ON a.id=b.id and a.SEQ1=b.SEQ1
inner join  #Trade_To_Pms_PO c ON b.ID = c.ID


-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.PO_Supp(
       ID
      ,SEQ1
      ,SuppID
      ,Remark
      ,Description
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate

)
select 
       b.ID
      ,SEQ1
      ,SuppID
      ,Remark
      ,Description
      ,b.AddName
      ,b.AddDate
      ,b.EditName
      ,b.EditDate

from Trade_To_Pms.dbo.PO_Supp as b inner join  #Trade_To_Pms_PO c ON b.ID = c.ID
where not exists(select id from Production.dbo.PO_Supp as a where a.id = b.id and a.SEQ1=b.SEQ1)


------------------------------------------------------------------PO2 END
------------------------------------------------------------------PO3 START
--Po3 pms�h�����
--,[BrandId] ,[ColorID_Old]
--,[BomFactory]
--      ,[BomCountry]
--      ,[BomStyle]
--      ,[BomCustCD]
--      ,[BomArticle]
--,[BomBuymonth]
--,[StockUnit]
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.ID	     =b.ID	
      ,a.Seq1	      =b.Seq1	
      ,a.Seq2	      =b.Seq2	
      ,a.FactoryID	      =b.FactoryID	
      ,a.RefNo	      =b.RefNo	
      ,a.SCIRefNo	      =b.SCIRefNo	
      ,a.FabricType	      =b.FabricType	
      ,a.Price	      =b.Price	
      ,a.UsedQty	      =b.UsedQty	
      ,a.Qty	      =b.Qty	
      ,a.POUnit	      =b.POUnit	
      ,a.Complete	      =b.Complete	
      ,a.SystemETD	      =b.SystemETD	
      ,a.CFMETD	      =b.CFMETD	
      ,a.RevisedETA	      =b.RevisedETA	
      ,a.FinalETD	      =b.FinalETD	
      ,a.ShipETA	      =b.ShipETA	
      ,a.ETA	      =b.ETA	
      ,a.FinalETA	      =b.FinalETA	
      ,a.ShipModeID	      =b.ShipModeID	
      ,a.SMRLock	      =b.SMRLock	
      ,a.SystemLock	      =b.SystemLock	
      ,a.PrintDate	      =b.PrintDate	
      ,a.PINO	      =b.PINO	
      ,a.PIDate	      =b.PIDate	
      ,a.ColorID	      =b.ColorID	
      ,a.SuppColor	      =b.SuppColor	
      ,a.SizeSpec	      =b.SizeSpec	
      ,a.SizeUnit	      =b.SizeUnit	
      ,a.Remark	      =b.Remark	
      ,a.Special	      =b.Special	
      ,a.Width	      =b.Width	
      ,a.StockQty	      =b.StockQty	
      ,a.NetQty	      =b.NetQty	
      ,a.LossQty	      =b.LossQty	
      ,a.SystemNetQty	      =b.SystemNetQty	
      ,a.StockPOID	      =b.StockPOID	
      ,a.StockSeq1	      =b.StockSeq1	
      ,a.StockSeq2	      =b.StockSeq2	
      ,a.InventoryUkey	      =b.InventoryUkey	
      ,a.OutputSeq1	      =b.OutputSeq1	
      ,a.OutputSeq2	      =b.OutputSeq2	
      ,a.SystemCreate	      =b.SystemCreate	
      ,a.FOC	      =b.FOC	
      ,a.Junk	      =b.Junk	
      ,a.ColorDetail	      =b.ColorDetail	
      ,a.BomZipperInsert	      =b.BomZipperInsert	
      ,a.BomCustPONo	      =b.BomCustPONo	
      ,a.ShipQty	      =b.ShipQty	
      ,a.Shortage	      =b.Shortage	
      ,a.ShipFOC	      =b.ShipFOC	
      ,a.ApQty	      =b.ApQty	
      ,a.Spec	      =b.Spec	
      ,a.InputQty	      =b.InputQty	
      ,a.OutputQty	      =b.OutputQty	
      ,a.AddName	      =b.AddName	
      ,a.AddDate	      =b.AddDate	
      ,a.EditName	      =b.EditName	
      ,a.EditDate	      =b.EditDate	
	

from Production.dbo.PO_Supp_Detail as a inner join Trade_To_Pms.dbo.PO_Supp_Detail as b ON a.id=b.id and a.SEQ1=b.Seq1 and a.SEQ2=b.Seq2
inner join  #Trade_To_Pms_PO c ON b.ID = c.ID 


-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.PO_Supp_Detail(
ID
      ,Seq1
      ,Seq2
      ,FactoryID
      ,RefNo
      ,SCIRefNo
      ,FabricType
      ,Price
      ,UsedQty
      ,Qty
      ,POUnit
      ,Complete
      ,SystemETD
      ,CFMETD
      ,RevisedETA
      ,FinalETD
      ,ShipETA
      ,ETA
      ,FinalETA
      ,ShipModeID
      ,SMRLock
      ,SystemLock
      ,PrintDate
      ,PINO
      ,PIDate
      ,ColorID
      ,SuppColor
      ,SizeSpec
      ,SizeUnit
      ,Remark
      ,Special
      ,Width
      ,StockQty
      ,NetQty
      ,LossQty
      ,SystemNetQty
      ,StockPOID
      ,StockSeq1
      ,StockSeq2
      ,InventoryUkey
      ,OutputSeq1
      ,OutputSeq2
      ,SystemCreate
      ,FOC
      ,Junk
      ,ColorDetail
      ,BomZipperInsert
      ,BomCustPONo
      ,ShipQty
      ,Shortage
      ,ShipFOC
      ,ApQty
      ,Spec
      ,InputQty
      ,OutputQty
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
)
select 
       b.ID
      ,Seq1
      ,Seq2
      ,b.FactoryID
      ,RefNo
      ,SCIRefNo
      ,FabricType
      ,Price
      ,UsedQty
      ,Qty
      ,POUnit
      ,b.Complete
      ,SystemETD
      ,CFMETD
      ,RevisedETA
      ,FinalETD
      ,ShipETA
      ,ETA
      ,FinalETA
      ,ShipModeID
      ,SMRLock
      ,SystemLock
      ,PrintDate
      ,PINO
      ,PIDate
      ,ColorID
      ,SuppColor
      ,SizeSpec
      ,SizeUnit
      ,Remark
      ,Special
      ,Width
      ,StockQty
      ,NetQty
      ,LossQty
      ,SystemNetQty
      ,StockPOID
      ,StockSeq1
      ,StockSeq2
      ,InventoryUkey
      ,OutputSeq1
      ,OutputSeq2
      ,SystemCreate
      ,FOC
      ,Junk
      ,ColorDetail
      ,BomZipperInsert
      ,BomCustPONo
      ,ShipQty
      ,Shortage
      ,ShipFOC
      ,ApQty
      ,Spec
      ,InputQty
      ,OutputQty
      ,b.AddName
      ,b.AddDate
      ,b.EditName
      ,b.EditDate
from Trade_To_Pms.dbo.PO_Supp_Detail as b inner join  #Trade_To_Pms_PO c ON b.ID = c.ID
where not exists(select id from Production.dbo.PO_Supp_Detail as a where a.id = b.id and a.SEQ1=b.Seq1 and a.SEQ2=b.Seq2	)

----------------------�R���DTABLE�h�����
Delete Production.dbo.PO_Supp_Detail
from Production.dbo.PO_Supp_Detail as a left join Trade_To_Pms.dbo.PO_Supp_Detail as b 
on a.id = b.id and a.SEQ1=b.Seq1 and a.SEQ2=b.Seq2
where b.id is null
and  a.id in (select id from #Trade_To_Pms_PO)
and a.InputQty = 0

UPDATE a
SET  
Junk = 1,
QTY = 0
from Production.dbo.PO_Supp_Detail as a inner join #Trade_To_Pms_PO as b ON a.id=b.id
where not exists(select id from Trade_To_Pms.dbo.PO_Supp_Detail as c where a.id = c.id)
and InputQty <> 0


------------------------------------------------------------------PO3 END
------------------------------------------------------



------------------------------------------------------------------PO4 START
--PO4
----------------------�R���DTABLE�h�����
Delete Production.dbo.PO_Supp_Detail_OrderList
from Production.dbo.PO_Supp_Detail_OrderList as a left join Trade_To_Pms.dbo.PO_Supp_Detail_OrderList as b 
on a.id = b.id and a.SEQ1 = b.SEQ1 and a.SEQ2 = b.SEQ2 and a.OrderID=b.OrderID
where b.id is null
and  a.id in (select id from #Trade_To_Pms_PO)
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.ID	     =b.ID		
      ,a.SEQ1	             =b.SEQ1		
      ,a.SEQ2	      =b.SEQ2		
      ,a.OrderID	      =b.OrderID		
      ,a.AddName	      =b.AddName		
      ,a.AddDate	      =b.AddDate		
      ,a.EditName	      =b.EditName		
      ,a.EditDate	      =b.EditDate		

from Production.dbo.PO_Supp_Detail_OrderList as a inner join Trade_To_Pms.dbo.PO_Supp_Detail_OrderList as b 
ON a.id=b.id and a.SEQ1 = b.SEQ1 and a.SEQ2 = b.SEQ2 and a.OrderID=b.OrderID
inner join  #Trade_To_Pms_PO c ON b.ID = c.ID


-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.PO_Supp_Detail_OrderList(
       ID
      ,SEQ1
      ,SEQ2
      ,OrderID
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate


)
select 
       b.ID
      ,SEQ1
      ,SEQ2
      ,OrderID
      ,b.AddName
      ,b.AddDate
      ,b.EditName
      ,b.EditDate


from Trade_To_Pms.dbo.PO_Supp_Detail_OrderList as b inner join  #Trade_To_Pms_PO c ON b.ID = c.ID 
where not exists(select id from Production.dbo.PO_Supp_Detail_OrderList as a where a.id = b.id and a.SEQ1 = b.SEQ1 and a.SEQ2 = b.SEQ2 and a.OrderID=b.OrderID)

------------------------------------------------------------------PO4 END
------------------------------------------------------

------------�̫�n�M�Ŧh��TEMP TABLE
drop table #Trade_To_Pms_PO 
--Fabric
--PMS�h�����
--,[NLCode]
--      ,[HSCode]
--      ,[CustomsUnit]
--      ,[PcsWidth]
--      ,[PcsLength]
--      ,[PcsKg]
--      ,[NoDeclare]
--      ,[NLCodeEditName]
--      ,[NLCodeEditDate]

---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
        a.SCIRefno	 =b.SCIRefno
      ,a.BrandID	      =b.BrandID
      ,a.Refno	      =b.Refno
      ,a.Width	      =b.Width
      ,a.Junk	      =b.Junk
      ,a.Type	      =b.Type
      ,a.MtltypeId	      =b.MtltypeId
      ,a.BomTypeCalculate	      =b.BomTypeCalculate
      ,a.Description	      =b.Description
      ,a.DescDetail	      =b.DescDetail
      ,a.LossType	      =b.LossType
      ,a.LossPercent	      =b.LossPercent
      ,a.LossQty	      =b.LossQty
      ,a.LossStep	      =b.LossStep
      ,a.UsageUnit	      =b.UsageUnit
      ,a.Weight	      =b.Weight
      ,a.WeightM2	      =b.WeightM2
      ,a.CBMWeight	      =b.CBMWeight
      ,a.CBM	      =b.CBM
      ,a.NoSizeUnit	      =b.NoSizeUnit
      ,a.BomTypeSize	      =b.BomTypeSize
      ,a.BomTypeColor	      =b.BomTypeColor
      ,a.ConstructionID	      =b.ConstructionID
      ,a.MatchFabric	      =b.MatchFabric
      ,a.WeaveTypeID	      =b.WeaveTypeID
      ,a.AddName	      =b.AddName
      ,a.AddDate	      =b.AddDate
      ,a.EditName	      =b.EditName
      ,a.EditDate	      =b.EditDate
from Production.dbo.Fabric as a inner join Trade_To_Pms.dbo.Fabric as b ON a.SCIRefno=b.SCIRefno
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Fabric(
       SCIRefno
      ,BrandID
      ,Refno
      ,Width
      ,Junk
      ,Type
      ,MtltypeId
      ,BomTypeCalculate
      ,Description
      ,DescDetail
      ,LossType
      ,LossPercent
      ,LossQty
      ,LossStep
      ,UsageUnit
      ,Weight
      ,WeightM2
      ,CBMWeight
      ,CBM
      ,NoSizeUnit
      ,BomTypeSize
      ,BomTypeColor
      ,ConstructionID
      ,MatchFabric
      ,WeaveTypeID
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
)
select 
      SCIRefno
      ,BrandID
      ,Refno
      ,Width
      ,Junk
      ,Type
      ,MtltypeId
      ,BomTypeCalculate
      ,Description
      ,DescDetail
      ,LossType
      ,LossPercent
      ,LossQty
      ,LossStep
      ,UsageUnit
      ,Weight
      ,WeightM2
      ,CBMWeight
      ,CBM
      ,NoSizeUnit
      ,BomTypeSize
      ,BomTypeColor
      ,ConstructionID
      ,MatchFabric
      ,WeaveTypeID
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
from Trade_To_Pms.dbo.Fabric as b
where not exists(select SCIRefno from Production.dbo.Fabric as a where a.SCIRefno = b.SCIRefno)


--Fab_Content
--Fabric_Content

----------------------�R���DTABLE�h�����
Delete Production.dbo.Fabric_Content
from Production.dbo.Fabric_Content as a left join Trade_To_Pms.dbo.Fabric_Content as b
on a.Ukey = b.Ukey
where b.Ukey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.SCIRefno	    =b.SCIRefno	
      ,a.Ukey	      =b.Ukey	
      ,a.Layerno	      =b.Layerno	
      ,a.percentage	      =b.percentage	
      ,a.MtltypeId	      =b.MtltypeId	
      ,a.AddName	      =b.AddName	
      ,a.AddDate	      =b.AddDate	
      ,a.EditName	      =b.EditName	
      ,a.EditDate	      =b.EditDate	
      ,a.OldSys_GroupKey	      =b.OldSys_GroupKey	

from Production.dbo.Fabric_Content as a inner join Trade_To_Pms.dbo.Fabric_Content as b ON a.Ukey=b.Ukey
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Fabric_Content(
       SCIRefno
      ,Ukey
      ,Layerno
      ,percentage
      ,MtltypeId
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
      ,OldSys_GroupKey
)
select 
      SCIRefno
      ,Ukey
      ,Layerno
      ,percentage
      ,MtltypeId
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
      ,OldSys_GroupKey
from Trade_To_Pms.dbo.Fabric_Content as b
where not exists(select Ukey from Production.dbo.Fabric_Content as a where a.Ukey = b.Ukey)








--FabricTax
--Fabric_HsCode
----------------------�R���DTABLE�h�����
Delete Production.dbo.Fabric_HsCode
from Production.dbo.Fabric_HsCode as a left join Trade_To_Pms.dbo.Fabric_HsCode as b
on a.SCIRefno = b.SCIRefno and  a.SuppID=b.SuppID and a.Year =b.Year
where b.SCIRefno is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.SCIRefno	     =b.SCIRefno	
      ,a.Ukey	      =b.Ukey	
      ,a.SuppID	      =b.SuppID	
      ,a.Year	      =b.Year	
      ,a.HsCode	      =b.HsCode	
      ,a.ImportDuty	      =b.ImportDuty	
      ,a.ECFADuty	      =b.ECFADuty	
      ,a.ASEANDuty	      =b.ASEANDuty	
      ,a.AddName	      =b.AddName	
      ,a.AddDate	      =b.AddDate	
      ,a.EditName	      =b.EditName	
      ,a.EditDate	      =b.EditDate	
      ,a.OldSys_Ukey	      =b.OldSys_Ukey	
      ,a.OldSys_Ver	      =b.OldSys_Ver	

from Production.dbo.Fabric_HsCode as a inner join Trade_To_Pms.dbo.Fabric_HsCode as b ON a.SCIRefno=b.SCIRefno and  a.SuppID=b.SuppID and a.Year =b.Year
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Fabric_HsCode(
       SCIRefno
      ,Ukey
      ,SuppID
      ,Year
      ,HsCode
      ,ImportDuty
      ,ECFADuty
      ,ASEANDuty
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
      ,OldSys_Ukey
      ,OldSys_Ver

)
select
       SCIRefno
      ,Ukey
      ,SuppID
      ,Year
      ,HsCode
      ,ImportDuty
      ,ECFADuty
      ,ASEANDuty
      ,AddName
      ,AddDate
      ,EditName
      ,EditDate
      ,OldSys_Ukey
      ,OldSys_Ver

from Trade_To_Pms.dbo.Fabric_HsCode as b
where not exists(select SCIRefno from Production.dbo.Fabric_HsCode as a where a.SCIRefno = b.SCIRefno and  a.SuppID=b.SuppID and a.Year =b.Year)




END


System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.583][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

If Object_Id ( 'dbo.imp_Prokit') Is Not Null
    Drop Procedure dbo.imp_Prokit;

System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.590][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

-- =============================================
-- Author:		LEO
-- Create date: 20160903
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE imp_Prokit
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
--	StyleC
--[Style_ProductionKits]
--PMS2�h��,[SendToQA]
--      ,[QAReceived]
--,[MDivisionID]

----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_ProductionKits
from Production.dbo.Style_ProductionKits as a left join Trade_To_Pms.dbo.Style_ProductionKits as b
on a.Ukey = b.Ukey
where b.Ukey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
       a.Ukey	 =b.Ukey
      ,a.StyleUkey	      =b.StyleUkey
      ,a.ProductionKitsGroup	      =b.ProductionKitsGroup
      ,a.FactoryID	      =b.FactoryID
      ,a.Article	      =b.Article
      ,a.DOC	      =b.DOC
      ,a.SendDate	      =b.SendDate
      --,a.ReceiveDate	      =b.ReceiveDate
      ,a.ProvideDate	      =b.ProvideDate
      ,a.SendName	      =b.SendName
      --,a.FtyHandle	      =b.FtyHandle
      ,a.MRHandle	      =b.MRHandle
      ,a.SMR	      =b.SMR
      ,a.PoHandle	      =b.PoHandle
      ,a.POSMR	      =b.POSMR
      ,a.OrderId	      =b.OrderId
      ,a.SCIDelivery	      =b.SCIDelivery
      ,a.IsPF	      =b.IsPF
      ,a.BuyerDelivery	      =b.BuyerDelivery
      ,a.AddOrderId	      =b.AddOrderId
      ,a.AddSCIDelivery	      =b.AddSCIDelivery
      ,a.AddIsPF	      =b.AddIsPF
      ,a.AddBuyerDelivery	      =b.AddBuyerDelivery
      ,a.MRLastDate	      =b.MRLastDate
      --,a.FtyLastDate	      =b.FtyLastDate
      ,a.MRRemark	      =b.MRRemark
      --,a.FtyRemark	      =b.FtyRemark
      ,a.FtyList	      =b.FtyList
      ,a.Reasonid	      =b.Reasonid
      ,a.StyleCUkey1_Old	      =b.StyleCUkey1_Old
from Production.dbo.Style_ProductionKits as a inner join Trade_To_Pms.dbo.Style_ProductionKits as b ON a.Ukey=b.Ukey
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_ProductionKits(
       Ukey
      ,StyleUkey
      ,ProductionKitsGroup
      ,FactoryID
      ,Article
      ,DOC
      ,SendDate
      --,ReceiveDate
      ,ProvideDate
      ,SendName
      --,FtyHandle
      ,MRHandle
      ,SMR
      ,PoHandle
      ,POSMR
      ,OrderId
      ,SCIDelivery
      ,IsPF
      ,BuyerDelivery
      ,AddOrderId
      ,AddSCIDelivery
      ,AddIsPF
      ,AddBuyerDelivery
      ,MRLastDate
      --,FtyLastDate
      ,MRRemark
      --,FtyRemark
      ,FtyList
      ,Reasonid
      ,StyleCUkey1_Old

)
select 
      Ukey
      ,StyleUkey
      ,ProductionKitsGroup
      ,FactoryID
      ,Article
      ,DOC
      ,SendDate
     -- ,ReceiveDate
      ,ProvideDate
      ,SendName
      --,FtyHandle
      ,MRHandle
      ,SMR
      ,PoHandle
      ,POSMR
      ,OrderId
      ,SCIDelivery
      ,IsPF
      ,BuyerDelivery
      ,AddOrderId
      ,AddSCIDelivery
      ,AddIsPF
      ,AddBuyerDelivery
      ,MRLastDate
      --,FtyLastDate
      ,MRRemark
      --,FtyRemark
      ,FtyList
      ,Reasonid
      ,StyleCUkey1_Old

from Trade_To_Pms.dbo.Style_ProductionKits as b
where not exists(select Ukey from Production.dbo.Style_ProductionKits as a where a.Ukey = b.Ukey)




  
END


System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.596][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

If Object_Id ( 'dbo.imp_replacement') Is Not Null
    Drop Procedure dbo.imp_replacement;

System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.605][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

-- =============================================
-- Author:		<Willy S01910>
-- Create date: <2016/08/19>
-- Description:	<import Replacement>
-- =============================================
CREATE PROCEDURE [dbo].[imp_Replacement]
	
AS
BEGIN

	declare @Sayfty table(id varchar(10)) --�u�t�N�X
	insert @Sayfty select id from Production.dbo.Factory

	declare  @tReplace table (id varchar(13))

	--Merge Replace1
	Merge Production.dbo.ReplacementReport as t
	Using (select * from Trade_To_Pms.dbo.ReplacementReport where factoryid in (select id from @Sayfty))as s
	on t.id=s.id 
		When matched and t.TPECFMDate <> s.TPECFMDate then
		update set
		t.TPECFMName = s.TPECFMName,
		t.TPECFMDate =s.TPECFMDate,
		t.TPEEditName=s.EditName,
		t.TPEEditDate=s.EditDate
	output inserted.id into @tReplace;

	--Merge Replace2
	Merge Production.dbo.ReplacementReport_Detail as t
	Using (select * from Trade_To_Pms.dbo.ReplacementReport_Detail where id in (select id from @tReplace)) as s
	on t.ukey=s.ukey
		when matched then
		update set
	    t.EstInQty = s.EstInQty,
		t.ActInQty = s.ActInQty, 
		t.AGradeRequest = s.AGradeRequest, 
		t.BGradeRequest = s.BGradeRequest, 
		t.NarrowRequest = s.NarrowRequest, 
		t.TotalRequest = s.TotalRequest, 
		t.AfterCuttingRequest = s.AfterCuttingRequest;


END





System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.616][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

If Object_Id ( 'dbo.imp_Style') Is Not Null
    Drop Procedure dbo.imp_Style;

System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:41.625][3] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。

-- =============================================
-- Author:		LEO
-- Create date: 20160903
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE imp_Style 
	-- Add the parameters for the stored procedure here

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--  STYLE
--PMS�h�����
--,[LocalMR]
--,[LocalStyle]
--,[PPMeeting]
--,[NoNeedPPMeeting]
--,[SampleApv]
--,[Type]
---------------------------UPDATE STYLE BY UKEY
UPDATE a
SET  
a.ID	= b.ID
,a.Ukey	= b.Ukey
,a.BrandID	= b.BrandID
,a.ProgramID	= b.ProgramID
,a.SeasonID	= b.SeasonID
,a.Model	= b.Model
,a.Description	= b.Description
,a.StyleName	= b.StyleName
,a.CdCodeID	= b.CdCodeID
,a.ApparelType	= b.ApparelType
,a.FabricType	= b.FabricType
,a.Contents	= b.Contents
,a.GMTLT	= b.GMTLT
,a.CPU	= b.CPU
,a.Factories	= b.Factories
,a.FTYRemark	= b.FTYRemark
,a.Phase	= b.Phase
,a.SampleSMR	= b.SampleSMR
,a.SampleMRHandle	= b.SampleMRHandle
,a.BulkSMR	= b.BulkSMR
,a.BulkMRHandle	= b.BulkMRHandle
,a.Junk	= b.Junk
,a.RainwearTestPassed	= b.RainwearTestPassed
,a.SizePage	= b.SizePage
,a.SizeRange	= b.SizeRange
,a.Gender	= b.Gender
,a.CTNQty	= b.CTNQty
,a.StdCost	= b.StdCost
,a.Processes	= b.Processes
,a.ArtworkCost	= b.ArtworkCost
,a.Picture1	= b.Picture1
,a.Picture2	= b.Picture2
,a.Label	= b.Label
,a.Packing	= b.Packing
,a.IETMSID	= b.IETMSID
,a.IETMSVersion	= b.IETMSVersion
,a.IEImportName	= b.IEImportName
,a.IEImportDate	= b.IEImportDate
,a.ApvDate	= b.ApvDate
,a.ApvName	= b.ApvName
,a.CareCode	= b.CareCode
,a.SpecialMark	= b.SpecialMark
,a.Lining	= b.Lining
,a.StyleUnit	= b.StyleUnit
,a.ExpectionForm	= b.ExpectionForm
,a.ExpectionFormRemark	= b.ExpectionFormRemark
,a.ComboType	= b.ComboType
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= IIF(a.EditDate >= b.EditDate,a.EditDate,b.EditName)
,a.EditDate	= IIF(a.EditDate >= b.EditDate,a.EditDate,b.EditDate)
,a.SizeUnit	= b.SizeUnit
,a.ModularParent	= b.ModularParent
,a.CPUAdjusted	= b.CPUAdjusted
,a.LocalStyle = 0
from Production.dbo.Style as a inner join Trade_To_Pms.dbo.Style as b ON a.Ukey=b.Ukey

-----------------------------------------------------------------------------------------------------------
---------------------------UPDATE STYLE BY PK
UPDATE a
SET  
a.ID	= b.ID
,a.Ukey	= b.Ukey
,a.BrandID	= b.BrandID
,a.ProgramID	= b.ProgramID
,a.SeasonID	= b.SeasonID
,a.Model	= b.Model
,a.Description	= b.Description
,a.StyleName	= b.StyleName
,a.CdCodeID	= b.CdCodeID
,a.ApparelType	= b.ApparelType
,a.FabricType	= b.FabricType
,a.Contents	= b.Contents
,a.GMTLT	= b.GMTLT
,a.CPU	= b.CPU
,a.Factories	= b.Factories
,a.FTYRemark	= b.FTYRemark
,a.Phase	= b.Phase
,a.SampleSMR	= b.SampleSMR
,a.SampleMRHandle	= b.SampleMRHandle
,a.BulkSMR	= b.BulkSMR
,a.BulkMRHandle	= b.BulkMRHandle
,a.Junk	= b.Junk
,a.RainwearTestPassed	= b.RainwearTestPassed
,a.SizePage	= b.SizePage
,a.SizeRange	= b.SizeRange
,a.Gender	= b.Gender
,a.CTNQty	= b.CTNQty
,a.StdCost	= b.StdCost
,a.Processes	= b.Processes
,a.ArtworkCost	= b.ArtworkCost
,a.Picture1	= b.Picture1
,a.Picture2	= b.Picture2
,a.Label	= b.Label
,a.Packing	= b.Packing
,a.IETMSID	= b.IETMSID
,a.IETMSVersion	= b.IETMSVersion
,a.IEImportName	= b.IEImportName
,a.IEImportDate	= b.IEImportDate
,a.ApvDate	= b.ApvDate
,a.ApvName	= b.ApvName
,a.CareCode	= b.CareCode
,a.SpecialMark	= b.SpecialMark
,a.Lining	= b.Lining
,a.StyleUnit	= b.StyleUnit
,a.ExpectionForm	= b.ExpectionForm
,a.ExpectionFormRemark	= b.ExpectionFormRemark
,a.ComboType	= b.ComboType
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= IIF(a.EditDate >= b.EditDate,a.EditDate,b.EditName)
,a.EditDate	= IIF(a.EditDate >= b.EditDate,a.EditDate,b.EditDate)
,a.SizeUnit	= b.SizeUnit
,a.ModularParent	= b.ModularParent
,a.CPUAdjusted	= b.CPUAdjusted
,a.LocalStyle = 0
from Production.dbo.Style as a 
inner join Trade_To_Pms.dbo.Style as b ON a.ID=b.ID and a.BrandID=b.BrandID and a.SeasonID=b.SeasonID
where a.LocalStyle=1
---------------------------------------------------------------
---------------------------UPDATE Style_Artwork_Quot(StyleD)
UPDATE a
SET  
a.Ukey=b.Ukey
from Production.dbo.Style_Artwork_Quot as a 
inner join Trade_To_Pms.dbo.Style as b ON a. StyleUkey=b.Ukey
inner join Production.dbo.Style as c ON c.ID=b.ID and c.BrandID=b.BrandID and c.SeasonID=b.SeasonID
where c.LocalStyle=1
and a.Ukey=c.Ukey
---------------------------------------------------------------------------------------------
-------------------------- INSERT STYLE BY�H�W��ؤ����󳣧䤣�쪺�ɭ� INSERT
INSERT INTO Production.dbo.Style(
ID
,Ukey
,BrandID
,ProgramID
,SeasonID
,Model
,Description
,StyleName
,CdCodeID
,ApparelType
,FabricType
,Contents
,GMTLT
,CPU
,Factories
,FTYRemark
,Phase
,SampleSMR
,SampleMRHandle
,BulkSMR
,BulkMRHandle
,Junk
,RainwearTestPassed
,SizePage
,SizeRange
,Gender
,CTNQty
,StdCost
,Processes
,ArtworkCost
,Picture1
,Picture2
,Label
,Packing
,IETMSID
,IETMSVersion
,IEImportName
,IEImportDate
,ApvDate
,ApvName
,CareCode
,SpecialMark
,Lining
,StyleUnit
,ExpectionForm
,ExpectionFormRemark
,ComboType
,AddName
,AddDate
,EditName
,EditDate
,SizeUnit
,ModularParent
,CPUAdjusted
,LocalStyle
)
select 
ID
,Ukey
,BrandID
,ProgramID
,SeasonID
,Model
,Description
,StyleName
,CdCodeID
,ApparelType
,FabricType
,Contents
,GMTLT
,CPU
,Factories
,FTYRemark
,Phase
,SampleSMR
,SampleMRHandle
,BulkSMR
,BulkMRHandle
,Junk
,RainwearTestPassed
,SizePage
,SizeRange
,Gender
,CTNQty
,StdCost
,Processes
,ArtworkCost
,Picture1
,Picture2
,Label
,Packing
,IETMSID
,IETMSVersion
,IEImportName
,IEImportDate
,ApvDate
,ApvName
,CareCode
,SpecialMark
,Lining
,StyleUnit
,ExpectionForm
,ExpectionFormRemark
,ComboType
,AddName
,AddDate
,EditName
,EditDate
,SizeUnit
,ModularParent
,CPUAdjusted
,0
from Trade_To_Pms.dbo.Style as b
where not exists(select id from Production.dbo.Style as a where a.ID=b.ID and a.BrandID=b.BrandID and a.SeasonID=b.SeasonID and a.LocalStyle=1)
AND not exists(select id from Production.dbo.Style as a where a.Ukey=b.Ukey )


--Style4
--Style_TmsCost
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_TmsCost
from Production.dbo.Style_TmsCost as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_TmsCost as b
on a.StyleUkey= b.StyleUkey AND a.ArtworkTypeID	= b.ArtworkTypeID
where b.StyleUkey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a.StyleUkey	= b.StyleUkey
,a.ArtworkTypeID	= b.ArtworkTypeID
,a.Seq	= b.Seq
,a.Qty	= b.Qty
,a.ArtworkUnit	= b.ArtworkUnit
,a.TMS	= b.TMS
,a.Price	= b.Price
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= b.EditName
,a.EditDate	= b.EditDate
from Production.dbo.Style_TmsCost as a 
inner join Trade_To_Pms.dbo.Style_TmsCost as b ON a.StyleUkey=b.StyleUkey AND a.ArtworkTypeID	= b.ArtworkTypeID
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_TmsCost(
StyleUkey
,ArtworkTypeID
,Seq
,Qty
,ArtworkUnit
,TMS
,Price
,AddName
,AddDate
,EditName
,EditDate

)
select 
b.StyleUkey
,b.ArtworkTypeID
,b.Seq
,b.Qty
,b.ArtworkUnit
,b.TMS
,b.Price
,b.AddName
,b.AddDate
,b.EditName
,b.EditDate

from Trade_To_Pms.dbo.Style_TmsCost as b
where not exists(select 1 from Production.dbo.Style_TmsCost as a where a.StyleUkey=b.StyleUkey AND a.ArtworkTypeID	= b.ArtworkTypeID)



--STYLEB
--Style_Artwork
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_Artwork
from Production.dbo.Style_Artwork as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.TradeUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_Artwork as b
on a.TradeUkey = b.Ukey
where b.Ukey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
 a.StyleUkey	= b.StyleUkey
,a.ArtworkTypeID	= b.ArtworkTypeID
,a.Article	= b.Article
,a.PatternCode	= b.PatternCode
,a.PatternDesc	= b.PatternDesc
,a.ArtworkID	= b.ArtworkID
,a.ArtworkName	= b.ArtworkName
,a.Qty	= b.Qty
,a.Price	= b.Price
,a.Cost	= b.Cost
,a.Remark	= b.Remark
--,a.Ukey	= b.Ukey
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= b.EditName
,a.EditDate	= b.EditDate
,a.TMS	= b.TMS
,a.TradeUkey	= b.Ukey

from Production.dbo.Style_Artwork as a 
inner join Trade_To_Pms.dbo.Style_Artwork as b ON a.TradeUkey=b.Ukey
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_Artwork(
StyleUkey
,ArtworkTypeID
,Article
,PatternCode
,PatternDesc
,ArtworkID
,ArtworkName
,Qty
,Price
,Cost
,Remark
--,Ukey
,AddName
,AddDate
,EditName
,EditDate
,TMS
,TradeUkey

)
select 
StyleUkey
,ArtworkTypeID
,Article
,PatternCode
,PatternDesc
,ArtworkID
,ArtworkName
,Qty
,Price
,Cost
,Remark
--,Ukey
,AddName
,AddDate
,EditName
,EditDate
,TMS
,Ukey

from Trade_To_Pms.dbo.Style_Artwork as b
where not exists(select 1 from Production.dbo.Style_Artwork as a where a.TradeUkey = b.Ukey)


--STYLE1
--Style_QtyCTN
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
 a.StyleUkey	= b.StyleUkey
,a.CustCDID	= b.CustCDID
,a.Qty	= b.Qty
,a.CountryID	= b.CountryID
,a.Continent	= b.Continent
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= b.EditName
,a.EditDate	= b.EditDate
,a.UKey	= b.UKey

from Production.dbo.Style_QtyCTN as a 
inner join Trade_To_Pms.dbo.Style_QtyCTN as b ON a.UKey=b.UKey
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_QtyCTN(
StyleUkey
,CustCDID
,Qty
,CountryID
,Continent
,AddName
,AddDate
,EditName
,EditDate
,UKey

)
select 
StyleUkey
,CustCDID
,Qty
,CountryID
,Continent
,AddName
,AddDate
,EditName
,EditDate
,UKey

from Trade_To_Pms.dbo.Style_QtyCTN as b
where not exists(select 1 from Production.dbo.Style_QtyCTN as a where a.UKey = b.UKey)

--STYLE5
--Style_SizeCode(�ݦA�T�{ukey���)
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_SizeCode
from Production.dbo.Style_SizeCode as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_SizeCode as b
on a.Ukey = b.Ukey
where b.Ukey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a.StyleUkey	= b.StyleUkey
,a.Seq	= b.Seq
,a.SizeGroup	= b.SizeGroup
,a.SizeCode	= b.SizeCode
,a.UKey	= b.UKey
from Production.dbo.Style_SizeCode as a 
inner join Trade_To_Pms.dbo.Style_SizeCode as b ON a.Ukey=b.Ukey
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_SizeCode(
StyleUkey
,Seq
,SizeGroup
,SizeCode
,UKey

)
select 
StyleUkey
,Seq
,SizeGroup
,SizeCode
,UKey

from Trade_To_Pms.dbo.Style_SizeCode as b
where not exists(select 1 from Production.dbo.Style_SizeCode as a where a.Ukey = b.Ukey)
--STYLE52
--STYLE_SICESPEC(�ݦA�T�{ukey���)
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_SizeSpec
from Production.dbo.Style_SizeSpec as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey =t.Ukey
left join Trade_To_Pms.dbo.Style_SizeSpec as b
on a.Ukey = b.Ukey
where b.Ukey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a.StyleUkey	= b.StyleUkey
,a.SizeItem	= b.SizeItem
,a.SizeCode	= b.SizeCode
,a.SizeSpec	= b.SizeSpec
,a.UKey	= b.UKey
from Production.dbo.Style_SizeSpec as a 
inner join Trade_To_Pms.dbo.Style_SizeSpec as b ON a.Ukey=b.Ukey
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_SizeSpec(
StyleUkey
,SizeItem
,SizeCode
,SizeSpec
,UKey

)
select 
StyleUkey
,SizeItem
,SizeCode
,SizeSpec
,UKey

from Trade_To_Pms.dbo.Style_SizeSpec as b
where not exists(select 1 from Production.dbo.Style_SizeSpec as a where a.Ukey = b.Ukey)
--STYLEG
--STYLE_ARTICLE
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_Article
from Production.dbo.Style_Article as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_Article as b
on a.StyleUkey	= b.StyleUkey AND a.Article	= b.Article
where b.StyleUkey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a.StyleUkey	= b.StyleUkey
,a.Seq	= b.Seq
,a.Article	= b.Article
,a.TissuePaper	= b.TissuePaper
,a.ArticleName	= b.ArticleName
,a.Contents	= b.Contents
from Production.dbo.Style_Article as a 
inner join Trade_To_Pms.dbo.Style_Article as b ON a.StyleUkey	= b.StyleUkey AND a.Article	= b.Article
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_Article(
StyleUkey
,Seq
,Article
,TissuePaper
,ArticleName
,Contents
)
select 
StyleUkey
,Seq
,Article
,TissuePaper
,ArticleName
,Contents
from Trade_To_Pms.dbo.Style_Article as b
where not exists(select 1 from Production.dbo.Style_Article as a where a.StyleUkey	= b.StyleUkey AND a.Article	= b.Article)
--STYLEA
--Style_MarkerList
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_MarkerList
from Production.dbo.Style_MarkerList as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_MarkerList as b
on a.Ukey = b.Ukey
where b.Ukey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a. StyleUkey	= b. StyleUkey
,a.Ukey	= b.Ukey
,a.Seq	= b.Seq
,a.MarkerName	= b.MarkerName
,a.FabricCode	= b.FabricCode
,a.FabricCombo	= b.FabricCombo
,a.LectraCode	= b.LectraCode
,a.MarkerLength	= b.MarkerLength
,a.ConsPC	= b.ConsPC
,a.CuttingPiece	= b.CuttingPiece
,a.ActCuttingPerimeter	= b.ActCuttingPerimeter
,a.StraightLength	= b.StraightLength
,a.CurvedLength	= b.CurvedLength
,a.Efficiency	= b.Efficiency
,a.Remark	= b.Remark
,a.MixedSizeMarker	= b.MixedSizeMarker
,a.MarkerNo	= b.MarkerNo
,a.MarkerUpdate	= b.MarkerUpdate
,a.MarkerUpdateName	= b.MarkerUpdateName
,a.AllSize	= b.AllSize
,a.PhaseID	= b.PhaseID
,a.SMNoticeID	= b.SMNoticeID
,a.MarkerVersion	= b.MarkerVersion
,a.Direction	= b.Direction
,a.CuttingWidth	= b.CuttingWidth
,a.Width	= b.Width
,a.Type	= b.Type
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= b.EditName
,a.EditDate	= b.EditDate

from Production.dbo.Style_MarkerList as a 
inner join Trade_To_Pms.dbo.Style_MarkerList as b ON a.Ukey=b.Ukey
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_MarkerList(
 StyleUkey
,Ukey
,Seq
,MarkerName
,FabricCode
,FabricCombo
,LectraCode
,MarkerLength
,ConsPC
,CuttingPiece
,ActCuttingPerimeter
,StraightLength
,CurvedLength
,Efficiency
,Remark
,MixedSizeMarker
,MarkerNo
,MarkerUpdate
,MarkerUpdateName
,AllSize
,PhaseID
,SMNoticeID
,MarkerVersion
,Direction
,CuttingWidth
,Width
,Type
,AddName
,AddDate
,EditName
,EditDate

)
select 
 StyleUkey
,Ukey
,Seq
,MarkerName
,FabricCode
,FabricCombo
,LectraCode
,MarkerLength
,ConsPC
,CuttingPiece
,ActCuttingPerimeter
,StraightLength
,CurvedLength
,Efficiency
,Remark
,MixedSizeMarker
,MarkerNo
,MarkerUpdate
,MarkerUpdateName
,AllSize
,PhaseID
,SMNoticeID
,MarkerVersion
,Direction
,CuttingWidth
,Width
,Type
,AddName
,AddDate
,EditName
,EditDate

from Trade_To_Pms.dbo.Style_MarkerList as b
where not exists(select 1 from Production.dbo.Style_MarkerList as a where a.Ukey = b.Ukey)
--STYLE61
--Style_FabricCode
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_FabricCode
from Production.dbo.Style_FabricCode as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_FabricCode as b
on a.StyleUkey = b.StyleUkey AND a.LectraCode	= b.LectraCode
where b.StyleUkey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a.StyleUkey	= b.StyleUkey
,a.LectraCode	= b.LectraCode
,a.FabricCode	= b.FabricCode
,a.PatternPanel	= b.PatternPanel
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= b.EditName
,a.EditDate	= b.EditDate
,a.Style_BOFUkey	= b.Style_BOFUkey
,a.QTWidth	= b.QTWidth
from Production.dbo.Style_FabricCode as a 
inner join Trade_To_Pms.dbo.Style_FabricCode as b ON a.StyleUkey = b.StyleUkey AND a.LectraCode	= b.LectraCode
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_FabricCode(
StyleUkey
,LectraCode
,FabricCode
,PatternPanel
,AddName
,AddDate
,EditName
,EditDate
,Style_BOFUkey
,QTWidth
)
select 
StyleUkey
,LectraCode
,FabricCode
,PatternPanel
,AddName
,AddDate
,EditName
,EditDate
,Style_BOFUkey
,QTWidth
from Trade_To_Pms.dbo.Style_FabricCode as b
where not exists(select 1 from Production.dbo.Style_FabricCode as a where a.StyleUkey = b.StyleUkey AND a.LectraCode	= b.LectraCode)
--STYLE8
--Style_BOF
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_BOF
from Production.dbo.Style_BOF as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_BOF as b
on a.Ukey = b.Ukey
where b.Ukey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a.StyleUkey	= b.StyleUkey
,a.FabricCode	= b.FabricCode
,a.Refno	= b.Refno
,a.SCIRefno	= b.SCIRefno
,a.Kind	= b.Kind
,a.Ukey	= b.Ukey
,a.SuppIDBulk	= b.SuppIDBulk
,a.SuppIDSample	= b.SuppIDSample

from Production.dbo.Style_BOF as a 
inner join Trade_To_Pms.dbo.Style_BOF as b ON a.Ukey=b.Ukey
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_BOF(
StyleUkey
,FabricCode
,Refno
,SCIRefno
,Kind
,Ukey
,SuppIDBulk
,SuppIDSample
)
select 
StyleUkey
,FabricCode
,Refno
,SCIRefno
,Kind
,Ukey
,SuppIDBulk
,SuppIDSample
from Trade_To_Pms.dbo.Style_BOF as b
where not exists(select 1 from Production.dbo.Style_BOF as a where a.Ukey = b.Ukey)
--STYLE9
--Style_BOA
--Pms�h�����
--,[BomTypeStyle]
--      ,[BomTypeArticle]
--      ,[BomTypeCustCD]
--      ,[BomTypeFactory]
--      ,[BomTypeBuyMonth]
--      ,[BomTypeCountry]
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_BOA
from Production.dbo.Style_BOA as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_BOA as b
on a.Ukey = b.Ukey
where b.Ukey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a.StyleUkey	= b.StyleUkey
,a.Ukey	= b.Ukey
,a.Refno	= b.Refno
,a.SCIRefno	= b.SCIRefno
,a.SEQ1	= b.SEQ1
,a.ConsPC	= b.ConsPC
,a.PatternPanel	= b.PatternPanel
,a.SizeItem	= b.SizeItem
,a.ProvidedPatternRoom	= b.ProvidedPatternRoom
,a.Remark	= b.Remark
,a.ColorDetail	= b.ColorDetail
,a.IsCustCD	= b.IsCustCD
,a.BomTypeZipper	= b.BomTypeZipper
,a.BomTypeSize	= b.BomTypeSize
,a.BomTypeColor	= b.BomTypeColor
,a.BomTypePo	= b.BomTypePo
,a.SuppIDBulk	= b.SuppIDBulk
,a.SuppIDSample	= b.SuppIDSample
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= b.EditName
,a.EditDate	= b.EditDate

from Production.dbo.Style_BOA as a 
inner join Trade_To_Pms.dbo.Style_BOA as b ON a.Ukey=b.Ukey
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_BOA(
StyleUkey
,Ukey
,Refno
,SCIRefno
,SEQ1
,ConsPC
,PatternPanel
,SizeItem
,ProvidedPatternRoom
,Remark
,ColorDetail
,IsCustCD
,BomTypeZipper
,BomTypeSize
,BomTypeColor
,BomTypePo
,SuppIDBulk
,SuppIDSample
,AddName
,AddDate
,EditName
,EditDate

)
select 
StyleUkey
,Ukey
,Refno
,SCIRefno
,SEQ1
,ConsPC
,PatternPanel
,SizeItem
,ProvidedPatternRoom
,Remark
,ColorDetail
,IsCustCD
,BomTypeZipper
,BomTypeSize
,BomTypeColor
,BomTypePo
,SuppIDBulk
,SuppIDSample
,AddName
,AddDate
,EditName
,EditDate

from Trade_To_Pms.dbo.Style_BOA as b
where not exists(select 1 from Production.dbo.Style_BOA as a where a.Ukey = b.Ukey)
--STYLE6
--Style_ColorCombo
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_ColorCombo
from Production.dbo.Style_ColorCombo as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_ColorCombo as b
on a. StyleUkey	= b. StyleUkey AND a.Article	= b.Article AND a.LectraCode	= b.LectraCode
where b.StyleUkey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a. StyleUkey	= b. StyleUkey
,a.Article	= b.Article
,a.ColorID	= b.ColorID
,a.FabricCode	= b.FabricCode
,a.LectraCode	= b.LectraCode
,a.PatternPanel	= b.PatternPanel
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= b.EditName
,a.EditDate	= b.EditDate

from Production.dbo.Style_ColorCombo as a 
inner join Trade_To_Pms.dbo.Style_ColorCombo as b ON a. StyleUkey	= b. StyleUkey AND a.Article	= b.Article AND a.LectraCode	= b.LectraCode
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_ColorCombo(
 StyleUkey
,Article
,ColorID
,FabricCode
,LectraCode
,PatternPanel
,AddName
,AddDate
,EditName
,EditDate
)
select 
 StyleUkey
,Article
,ColorID
,FabricCode
,LectraCode
,PatternPanel
,AddName
,AddDate
,EditName
,EditDate
from Trade_To_Pms.dbo.Style_ColorCombo as b
where not exists(select 1 from Production.dbo.Style_ColorCombo as a where a. StyleUkey	= b. StyleUkey AND a.Article	= b.Article AND a.LectraCode	= b.LectraCode)
--STYLEJ
--Style_HSCode
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_HSCode
from Production.dbo.Style_HSCode as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_HSCode as b
on a.UKEY = b.UKEY
where b.UKEY is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a.StyleUkey	= b.StyleUkey
,a.UKEY	= b.UKEY
,a.Article	= b.Article
,a.CountryID	= b.CountryID
,a.Continent	= b.Continent
,a.HSCode1	= b.HSCode1
,a.HSCode2	= b.HSCode2
,a.CATNo1	= b.CATNo1
,a.CATNo2	= b.CATNo2
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= b.EditName
,a.EditDate	= b.EditDate

from Production.dbo.Style_HSCode as a 
inner join Trade_To_Pms.dbo.Style_HSCode as b ON a.UKEY=b.UKEY
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_HSCode(
StyleUkey
,UKEY
,Article
,CountryID
,Continent
,HSCode1
,HSCode2
,CATNo1
,CATNo2
,AddName
,AddDate
,EditName
,EditDate

)
select 
StyleUkey
,UKEY
,Article
,CountryID
,Continent
,HSCode1
,HSCode2
,CATNo1
,CATNo2
,AddName
,AddDate
,EditName
,EditDate

from Trade_To_Pms.dbo.Style_HSCode as b
where not exists(select 1 from Production.dbo.Style_HSCode as a where a.UKEY = b.UKEY)
--STYLEMI
--Style_MiAdidasColorCombo
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_MiAdidasColorCombo
from Production.dbo.Style_MiAdidasColorCombo as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_MiAdidasColorCombo as b
on a.StyleUkey	= b.StyleUkey AND a.LectraCode	= b.LectraCode AND a.Ukey_old	= b.Ukey_old
where b.StyleUkey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a.StyleUkey	= b.StyleUkey
,a.LectraCode	= b.LectraCode
,a.SetupID	= b.SetupID
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= b.EditName
,a.EditDate	= b.EditDate
,a.Ukey_old	= b.Ukey_old

from Production.dbo.Style_MiAdidasColorCombo as a 
inner join Trade_To_Pms.dbo.Style_MiAdidasColorCombo as b ON a.StyleUkey	= b.StyleUkey AND a.LectraCode	= b.LectraCode AND a.Ukey_old	= b.Ukey_old
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_MiAdidasColorCombo(
StyleUkey
,LectraCode
,SetupID
,AddName
,AddDate
,EditName
,EditDate
,Ukey_old
)
select 
StyleUkey
,LectraCode
,SetupID
,AddName
,AddDate
,EditName
,EditDate
,Ukey_old

from Trade_To_Pms.dbo.Style_MiAdidasColorCombo as b
where not exists(select 1 from Production.dbo.Style_MiAdidasColorCombo as a where a.StyleUkey	= b.StyleUkey AND a.LectraCode	= b.LectraCode AND a.Ukey_old	= b.Ukey_old)
--STYLELT
--Style_GMTLTFty
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_GMTLTFty
from Production.dbo.Style_GMTLTFty as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.StyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_GMTLTFty as b
on a.StyleUkey	= b.StyleUkey AND a.FactoryID	= b.FactoryID
where b.StyleUkey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a.StyleUkey	= b.StyleUkey
,a.FactoryID	= b.FactoryID
,a.GMTLT	= b.GMTLT
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= b.EditName
,a.EditDate	= b.EditDate
from Production.dbo.Style_GMTLTFty as a 
inner join Trade_To_Pms.dbo.Style_GMTLTFty as b ON a.StyleUkey	= b.StyleUkey AND a.FactoryID	= b.FactoryID
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_GMTLTFty(
StyleUkey
,FactoryID
,GMTLT
,AddName
,AddDate
,EditName
,EditDate
)
select 
StyleUkey
,FactoryID
,GMTLT
,AddName
,AddDate
,EditName
,EditDate
from Trade_To_Pms.dbo.Style_GMTLTFty as b
where not exists(select 1 from Production.dbo.Style_GMTLTFty as a where a.StyleUkey	= b.StyleUkey AND a.FactoryID	= b.FactoryID)
--STYLEK
--Style_SimilarStyle
----------------------�R���DTABLE�h�����
Delete Production.dbo.Style_SimilarStyle
from Production.dbo.Style_SimilarStyle as a 
INNER JOIN Trade_To_Pms.dbo.Style as t on a.MasterStyleUkey=t.Ukey
left join Trade_To_Pms.dbo.Style_SimilarStyle as b
on a.MasterStyleUkey	= b.MasterStyleUkey AND a.ChildrenStyleUkey	= b.ChildrenStyleUkey
where b.MasterStyleUkey is null
---------------------------UPDATE �DTABLE��ӷ�TABLE ���@��(�DTABLE�h���� �O�_�� ~�ӷ�TABLE�h���ܤ��z�|)
UPDATE a
SET  
a.MasterBrandID	= b.MasterBrandID
,a.MasterStyleID	= b.MasterStyleID
,a.MasterSeasonID	= b.MasterSeasonID
,a.MasterStyleUkey	= b.MasterStyleUkey
,a.ChildrenBrandID	= b.ChildrenBrandID
,a.ChildrenStyleID	= b.ChildrenStyleID
,a.ChildrenSeasonID	= b.ChildrenSeasonID
,a.ChildrenStyleUkey	= b.ChildrenStyleUkey
,a.AddName	= b.AddName
,a.AddDate	= b.AddDate
,a.EditName	= b.EditName
,a.EditDate	= b.EditDate

from Production.dbo.Style_SimilarStyle as a 
inner join Trade_To_Pms.dbo.Style_SimilarStyle as b ON a.MasterStyleUkey	= b.MasterStyleUkey AND a.ChildrenStyleUkey	= b.ChildrenStyleUkey
-------------------------- INSERT INTO ��
INSERT INTO Production.dbo.Style_SimilarStyle(
MasterBrandID
,MasterStyleID
,MasterSeasonID
,MasterStyleUkey
,ChildrenBrandID
,ChildrenStyleID
,ChildrenSeasonID
,ChildrenStyleUkey
,AddName
,AddDate
,EditName
,EditDate

)
select 
MasterBrandID
,MasterStyleID
,MasterSeasonID
,MasterStyleUkey
,ChildrenBrandID
,ChildrenStyleID
,ChildrenSeasonID
,ChildrenStyleUkey
,AddName
,AddDate
,EditName
,EditDate

from Trade_To_Pms.dbo.Style_SimilarStyle as b
where not exists(select 1 from Production.dbo.Style_SimilarStyle as a where a.MasterStyleUkey	= b.MasterStyleUkey AND a.ChildrenStyleUkey	= b.ChildrenStyleUkey)


END


System.InvalidOperationException: ExecuteNonQuery 必須有開啟與可用的 Connection。連接目前的狀態已關閉。
   於 System.Data.SqlClient.SqlCommand.ValidateCommand(String method, Boolean async)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
[2016/09/22 16:30:48.918][21] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_Airboat

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Airboat
Error Line:18
Error Msg:Invalid object name 'Trade_To_Pms.dbo.FactoryExpress'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:df9e2241-5881-4855-a26e-29e82d6817a6
[2016/09/22 16:30:48.956][20] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_export

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Export
Error Line:22
Error Msg:Invalid object name 'Trade_To_Pms.dbo.Export'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:55488054-28bc-4ace-ab97-2e657fe2e306
[2016/09/22 16:30:48.979][18] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_Airpp

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Airpp
Error Line:17
Error Msg:Invalid object name 'Trade_To_Pms.dbo.AirPP'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:ce31787f-714f-4aea-904c-682b9e1f5713
[2016/09/22 16:30:49.006][25] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_debit

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Debit
Error Line:19
Error Msg:Invalid object name 'Trade_To_Pms.dbo.Debit'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:6705a724-80b1-42b4-b80d-a654b29fd685
[2016/09/22 16:30:49.151][21] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_Invadj

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Invadj
Error Line:21
Error Msg:Invalid object name 'Trade_To_Pms.dbo.InvAdjust'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:c1ee4f86-57f6-43a0-91e9-9903cce160f5
[2016/09/22 16:30:49.185][15] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_adicomp

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Adicomp
Error Line:15
Error Msg:Invalid object name 'Trade_To_Pms.dbo.ADIDASComplain'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:3fe6a8f9-32e1-41d3-b3de-53ad016f1815
[2016/09/22 16:30:49.253][14] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_Ietms

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Ietms
Error Line:19
Error Msg:Invalid object name 'Trade_To_Pms.dbo.IETMS'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:0728fdb1-3aa3-4f78-b78a-67024612d2a6
[2016/09/22 16:30:49.267][20] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_Inv

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Inv
Error Line:18
Error Msg:Invalid object name 'Trade_To_Pms.dbo.Inventory'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:bc3b9bb2-e980-44da-984d-5c6e5bfaabed
[2016/09/22 16:30:49.293][15] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_Po

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Po
Error Line:17
Error Msg:Invalid object name 'Trade_To_Pms.dbo.PO'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:02a347f8-7c96-45a3-99b7-55bcdfb9c273
[2016/09/22 16:30:49.330][19] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_base

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Base
Error Line:17
Error Msg:Invalid object name 'Trade_To_Pms.dbo.Brand'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:dbecb4fc-bf6d-4c09-bbae-8985e5c6031f
[2016/09/22 16:30:49.373][14] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_Prokit

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Prokit
Error Line:22
Error Msg:Invalid object name 'Trade_To_Pms.dbo.Style_ProductionKits'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:66a97cb3-dc30-4d45-a8ed-342302b0d48f
[2016/09/22 16:30:49.525][14] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_Style

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Style
Error Line:25
Error Msg:Invalid object name 'Trade_To_Pms.dbo.Style'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:ce31787f-714f-4aea-904c-682b9e1f5713
[2016/09/22 16:30:49.530][25] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_Pattern

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Pattern
Error Line:19
Error Msg:Invalid object name 'Trade_To_Pms.dbo.Pattern'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:ea40aa58-3c1e-4cdd-bdc4-2710d5b57dc8
[2016/09/22 16:30:50.049][18] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_part

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_part
Error Line:13
Error Msg:Invalid object name 'Trade_To_Pms.dbo.Part'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:e3b3525f-df70-4c56-a381-cd616c6425d6
[2016/09/22 16:30:54.059][23] Error: Sci.dll  Sci.Data.DBProxy.ExecuteByConn  執行資料庫文字命令時發生錯誤。
BEGIN TRY
	Begin tran

    exec imp_order

	Commit tran
END TRY
BEGIN CATCH
	RollBack Tran

    declare @ErrMsg varchar(1000) = 'Err# : ' + ltrim(str(ERROR_NUMBER())) + 
				CHAR(10)+'Error Severity:'+ltrim(str(ERROR_SEVERITY()  )) +
				CHAR(10)+'Error State:' + ltrim(str(ERROR_STATE() ))  +
				CHAR(10)+'Error Proc:' + isNull(ERROR_PROCEDURE(),'')  +
				CHAR(10)+'Error Line:'+ltrim(str(ERROR_LINE()  )) +
				CHAR(10)+'Error Msg:'+ ERROR_MESSAGE() ;
    
    RaisError( @ErrMsg ,16,-1)
END CATCH
System.Data.SqlClient.SqlException (0x80131904): Err# : 208
Error Severity:16
Error State:1
Error Proc:imp_Order
Error Line:24
Error Msg:Invalid object name 'Trade_To_Pms.dbo.Orders'.
   於 System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   於 System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   於 System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   於 System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   於 System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   於 Sci.Data.DBProxy.ExecuteByConn(SqlConnection conn, String cmdtext, IList`1 parameters) 於 d:\System2014\PublicClass\Sci\Data\DBProxy.cs: 行 1148
ClientConnectionId:65a16f2c-f8e7-4ccd-b9e3-83906196e51a
